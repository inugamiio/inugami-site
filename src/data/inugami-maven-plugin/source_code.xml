<xml>


<!--*********************************************************************** 
* GAV    
***********************************************************************-->
<src name="gav">
<![CDATA[
<plugin>
    <groupId>io.inugami.maven.plugin.analysis</groupId>
    <artifactId>inugami-project-analysis-maven-plugin</artifactId>
    <version>1.6.3</version>

    <extension>true</extension>
    <executions>
        <execution>
            <id>check</id>
            <phase>analyze</phase>
            <goals>
                <goal>check</goal>
            </goals>
        </execution>
        <execution>
            <id>info</id>
            <phase>info</phase>
            <goals>
                <goal>retrieveInformation</goal>
            </goals>
        </execution>
    </executions>
</plugin>
]]>
</src>


<!--*********************************************************************** 
* gav_inugami-project-analysis-maven-plugin-annotations    
***********************************************************************-->
<src name="gav_inugami-project-analysis-maven-plugin-annotations">
<![CDATA[
<dependency>
    <groupId>io.inugami.maven.plugin.analysis</groupId>
    <artifactId>inugami-project-analysis-maven-plugin-annotations</artifactId>
    <version>1.6.3</version>
</dependency>
]]>
</src>


<!--*********************************************************************** 
* gav_inugami-project-analysis-maven-plugin-annotations    
***********************************************************************-->
<src name="gav_inugami_api">
<![CDATA[
<dependencies>
    <groupId>io.inugami</groupId>
    <artifactId>inugami_api</artifactId>
    <version>2.1.0</version>
</dependencies>
]]>
</src>


<!--*********************************************************************** 
* docker_compose    
***********************************************************************-->
<src name="docker_compose">
    <![CDATA[
    version: "3"
    services:
      neo4j:
        image: neo4j:4.1.1
        ports:
          - "7474:7474"
          - "7473:7473"
          - "7687:7687"
        expose:
          - 7474
          - 7473
          - 7687
        environment:
          - NEO4J_AUTH=neo4j/password
          - EXTENSION_SCRIPT=/var/lib/neo4j/import/neo4j-bootstrap.sh
          - NEO4J_dbms_unmanaged__extension__classes=semantics.extension=/rdf
          - NEO4J_dbms_security_procedures_whitelist=apoc.coll.*,apoc.load.*,semantics.*
          - NEO4J_dbms_security_procedures_unrestricted=apoc.*,semantics.*
          - NEO4J_apoc_export_file_enabled=true
          - NEO4J_apoc_import_file_enabled=true
          - NEO4J_apoc_import_file_use__neo4j__config=true
        volumes:
          - ./import:/var/lib/neo4j/import
          - ./conf:/var/lib/neo4j/conf
          - ./logs:/var/lib/neo4j/logs
          - ./plugins:/var/lib/neo4j/plugins
        networks:
          - neo4j-network
    networks:
      neo4j-network:
        driver: bridge
    ]]>
    </src>


<!--*********************************************************************** 
* neo4j_indexes
***********************************************************************-->
<src name="neo4j_indexes">
<![CDATA[
CREATE INDEX ON :Artifact(name,groupId,artifactId,packaging,shortName,version);
CREATE INDEX ON :Version(name, uid,artifactId,groupId,major,minor,packaging,patch,tag,version );

CREATE INDEX ON :ErrorCode(exploitationError,name,errorCode,message,shortName,statusCode);
CREATE INDEX ON :ErrorType(name,shortName);


CREATE INDEX ON :Service(accept,autoStartup,bindings,containerFactory,contentType,converterWinsContentType,destination,errorHandler,event,exclusive,identifier,listenerId,method,name,payload,queue,queuesToDeclare,requestPayload,responsePayload,uid,uri,verb);
CREATE INDEX ON :ServiceType(name, uid);

CREATE INDEX ON :Method(name, uid,class,method,parameters,returnType);

CREATE INDEX ON :Property(name, uid,mandatory,propertyType );

CREATE INDEX ON :INPUT_DTO(name, uid);
CREATE INDEX ON :OUTPUT_DTO(name, uid);

CREATE INDEX ON :LocalEntity(name, uid,payload);
CREATE INDEX ON :Entity(name, uid,payload);


CREATE INDEX ON :Scm(name, uid,commit);
CREATE INDEX ON :Author(name, uid,email);
]]>
</src>
    

<!--*********************************************************************** 
* neo4j_structure
***********************************************************************-->
<src name="neo4j_structure">
<![CDATA[
CALL db.schema.visualization
]]>
</src>
    
<!--*********************************************************************** 
* info_restServices
***********************************************************************-->
<src name="info_restServices">
<![CDATA[
mvn info -Daction=restServices
]]>
</src>
        
<!--*********************************************************************** 
* info_queryDisplay
***********************************************************************-->
<src name="info_queryDisplay">
<![CDATA[
mvn info -Daction=queryDisplay
]]>
</src>

<!--*********************************************************************** 
* info_search_services_rest
***********************************************************************-->
<src name="info_search_services_rest">
<![CDATA[
mvn info -Daction=queryDisplay -Dquery=search_services_rest
]]>
</src>

<!--*********************************************************************** 
* info_search_error_codes
***********************************************************************-->
<src name="info_search_error_codes">
<![CDATA[
mvn info -Daction=queryDisplay -Dquery=search_error_codes
]]>
</src>



<!--*********************************************************************** 
* info_queueInfo
***********************************************************************-->
<src name="info_queueInfo">
<![CDATA[
mvn info -Daction=queueInfo
]]>
</src>
    

<!--*********************************************************************** 
* info_queue_jms_sender
***********************************************************************-->
<src name="info_queue_jms_sender">
<![CDATA[
@JmsSender(destination = "${my.activeMq.onUserCreated.queue}", id = "create.user.queue")
public void sendCreateUser(final String someParameter, @JmsEvent final User user) {
    // process sending event
}
]]>
</src>

<!--*********************************************************************** 
* info_queue_rabbit_sender
***********************************************************************-->
<src name="info_queue_rabbit_sender">
<![CDATA[
@RabbitMqSender(echangeName = "${events.exchangeName}",
                queue = "${events.method.user.queueName}",
                routingKey = "${events.user.method.created.routingKey}"
)
public void fireEvent(@RabbitMqEvent  final UserCreatedEvent event) {
    // process sending event
}
]]>
</src>


<!--*********************************************************************** 
* info_queue_rabbit_handler
***********************************************************************-->
<src name="info_queue_rabbit_handler">
<![CDATA[
@RabbitMqHandlerInfo(routingKey = "${events.user.authenticated.routingKey}",
typeId = "${events.user.authenticated.typeId}")
@RabbitHandler
public void onAuthenticated(final UserAuthenticatedEvent event) {
    // process listen
}
]]>
</src>



<!--*********************************************************************** 
* info_errorDisplay
***********************************************************************-->
<src name="info_errorDisplay">
<![CDATA[
mvn info -Daction=errorDisplay
]]>
</src>
    
<src name="errorCode">
    <![CDATA[
    package io.inugami.api.exceptions;
    public interface ErrorCode {
    
    
        public ErrorCode getCurrentErrorCode();
    
        default int getStatusCode() {
            return getCurrentErrorCode() == null ? 500 : getCurrentErrorCode().getStatusCode();
        }
    
    
        default String getErrorCode() {
            return getCurrentErrorCode() == null ? "undefine" : getCurrentErrorCode().getErrorCode();
        }
    
    
        default String getMessage() {
            return getCurrentErrorCode() == null ? "error" : getCurrentErrorCode().getMessage();
        }
    
    
        default String getMessageDetail() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getMessageDetail();
        }
    
        default boolean isExploitationError() {
            return getCurrentErrorCode() == null ? false : getCurrentErrorCode().isExploitationError();
        }
    
        default String getErrorType() {
            return getCurrentErrorCode() == null ? "technical" : getCurrentErrorCode().getErrorType();
        }
    
    
        default String getPayload() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getPayload();
        }
    
    
        default boolean isRollbackRequire() {
            return getCurrentErrorCode() == null ? false : getCurrentErrorCode().isRollbackRequire();
        }
    
        default boolean isRetryable() {
            return getCurrentErrorCode() == null ? false : getCurrentErrorCode().isRetryable();
        }
    
        default BiConsumer<String, Exception> getErrorHandler() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getErrorHandler();
        }
    
        default ErrorCode addDetail(String detail, Object... values) {
            return toBuilder().addMessageDetail(detail, values).build();
        }
        
        default String getCategory() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getCategory();
        }
    
    
        default DefaultErrorCode.DefaultErrorCodeBuilder toBuilder() {
            DefaultErrorCode.DefaultErrorCodeBuilder builder = null;
            if (getCurrentErrorCode() == null) {
                builder = DefaultErrorCode.fromErrorCode(DefaultErrorCode.buildUndefineError());
            }
            else {
                builder = DefaultErrorCode.fromErrorCode(getCurrentErrorCode());
            }
            return builder;
        }
    }
    ]]>
</src>
    
    
<src name="errorCodeEnum">
<![CDATA[
public enum IssuesError implements ErrorCode {

    ISSUES_1(newBuilder()
            .setStatusCode(400)
            .setMessage("issues request invalid")
            .setErrorType("input")),

    ISSUES_1_1(newBuilder()
            .setStatusCode(400)
            .setMessage("issue uid is mandatory")
            .setFonctionnalError());

    private final ErrorCode errorCode;

    private IssuesError(final ErrorCodeBuilder errorBuilder) {
        errorCode = errorBuilder.setErrorCode(this.name()).build();
    }

    @Override
    public ErrorCode getCurrentErrorCode() {
        return errorCode;
    }
}
]]>
</src>


<src name="errorCode_override">
<![CDATA[
<properties>
    <inugami.maven.plugin.analysis.analyzer.errorCode.interface>
        you.project.ErrorCode
    </inugami.maven.plugin.analysis.analyzer.errorCode.interface>
</properties>
]]>
</src>



<!--*********************************************************************** 
* maven_pom_properties    
***********************************************************************-->
<src name="maven_pom_properties">
    <![CDATA[
    <properties>
        <inugami.maven.plugin.analysis.project.base.name>your.base.package</inugami.maven.plugin.analysis.project.base.name>
        <inugami.maven.plugin.analysis.writer.neo4j.url>bolt://localhost:7687</inugami.maven.plugin.analysis.writer.neo4j.url>
        <inugami.maven.plugin.analysis.writer.neo4j.user>neo4j</inugami.maven.plugin.analysis.writer.neo4j.user>
        <inugami.maven.plugin.analysis.writer.neo4j.password>password</inugami.maven.plugin.analysis.writer.neo4j.password>
    </properties>
]]>
</src>

<!--*********************************************************************** 
* maven_settings    
***********************************************************************-->
<src name="maven_settings">
    <![CDATA[
    <servers>
        <servers>
            <id>neo4j</id>
            <username>neo4j</username>
            <password>{Yt5nGluOZ0sHzEiL7Le2IHFjtuTonkfx4yVEG3CYzZ8=}</password>
            <configuration>
                <url>bolt://localhost:7687</url>
            </configuration>
        </servers>
    </servers>
]]>
</src>


<!--*********************************************************************** 
* mvn_analyze    
***********************************************************************-->
<src name="mvn_analyze">
    <![CDATA[
mvn analyze
]]>
</src>

<!--*********************************************************************** 
* maven_settings    
***********************************************************************-->
<src name="mvn_info">
    <![CDATA[
    mvn info
]]>
</src>
</xml>
