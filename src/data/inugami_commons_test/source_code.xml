<xml>


<!--*********************************************************************** 
* GAV    
***********************************************************************-->
<src name="gav">
<![CDATA[
<dependency>
    <groupId>io.inugami</groupId>
    <artifactId>inugami_commons_test</artifactId>
    <version>2.3.0</version>
</dependency>
]]>
</src>



<!--*********************************************************************** 
* readFileRelative    
***********************************************************************-->
<src name="readFileRelative">
    <![CDATA[
    final String value = UnitTestHelper.readFileRelative("test/UnitTestHelperFile/readFileRelative.txt");
    assertThat(value).isEqualTo("hello");
    ]]>
    </src>
    


<src name="readFileRelativeFile">
    <![CDATA[
    hello
    ]]>
</src>
    
<src name="readFileIntegration">
    <![CDATA[
    final String value = UnitTestHelper.readFileIntegration("test/UnitTestHelperFile/readFileRelative.txt");
    assertThat(value).isEqualTo("hello");
    ]]>
    </src>
    
    
<src name="readFile">
    <![CDATA[
    public static String readFile(final File file) {
        return UnitTestHelperFile.readFile(file);
    }

    public static String readFile(final String file) {
        return UnitTestHelperFile.readFile(file);
    }
]]>
</src>

<!--*********************************************************************** 
* buildpath    
***********************************************************************-->
<src name="buildpath">
    <![CDATA[
    public static File buildTestFilePath(final String... filePathParts) {
        return UnitTestHelperPath.buildTestFilePath(filePathParts);
    }

    public static File buildIntegrationTestFilePath(final String... filePathParts) {
        return UnitTestHelperPath.buildIntegrationTestFilePath(filePathParts);
    }

    public static File buildPath(final String... parts) {
        return UnitTestHelperPath.buildPath(parts);
    }

]]>
</src>

<src name="buildpathUsage">
    <![CDATA[
    final File file = UnitTestHelper.buildTestFilePath("test", "UnitTestHelperFile", "readFileRelative.txt");
    assertThat(UnitTestHelper.readFile(file)).isEqualTo("hello");
]]>
</src>


<!--*********************************************************************** 
* stub    
***********************************************************************-->
<src name="loadRelativeStubFiles">
    <![CDATA[
    .
    └── test
        └── unitTestHelperStubTest
            ├── userDto.1.json
            └── userDto.2.yaml
]]>
</src>
<src name="loadRelativeStub">
    <![CDATA[
@Slf4j
@ExtendWith(MockitoExtension.class)
public class UnitTestHelperTest {

    @Mock
    private UnitTestHelperStubTestDAO dao;

    @Test
    public void loadRelativeStub_shouldLoadMocks() {
        final List<UserDto> cache = new ArrayList<>();
        when(dao.getUserById(anyLong())).thenAnswer(answer -> UnitTestHelper.loadRelativeStub(answer,
                                                                                              "test/unitTestHelperStubTest",
                                                                                              UserDto::getId,
                                                                                              UserDto.class,
                                                                                              cache
        ));

        assertThat(dao.getUserById(1L)).isNotNull();
        assertThat(dao.getUserById(1L).getId()).isEqualTo(1L);
        assertThat(cache.size()).isEqualTo(2);
    }
}
]]>
</src>

<src name="loadRelativeStubFilesJson">
    <![CDATA[
    {
        "id": 1,
        "firstName": "John",
        "lastName": "Smith",
        "creationDate": "2023-04-07T14:04:00"
    }
]]>
</src>

<src name="loadRelativeStubFilesYaml">
    <![CDATA[
    id: 2
    firstName: "Albertine"
    lastName: "Chandonnet"
    creationDate: "2023-04-08T09:04:00"
]]>
</src>

<src name="loadRelativeStubMethods">
    <![CDATA[
public static <T, ID> T loadIntegrationTestStub(final InvocationOnMock answer,
                                                final String folder,
                                                final Function<T, ID> getId,
                                                final Class<? extends T> userDtoClass) {}

public static <T, ID> T loadIntegrationTestStub(final InvocationOnMock answer,
                                                final String folder,
                                                final Function<T, ID> getId,
                                                final Function<Object[], ID> idResolver,
                                                final Class<? extends T> userDtoClass) {}

public static <T, ID> T loadIntegrationTestStub(final InvocationOnMock answer,
                                                final String folder,
                                                final Function<T, ID> getId,
                                                final Class<? extends T> userDtoClass,
                                                final List<T> cache) {}

public static <T, ID> T loadIntegrationTestStub(final InvocationOnMock answer,
                                                final String folder,
                                                final Function<T, ID> getId,
                                                final Function<Object[], ID> idResolver,
                                                final Class<? extends T> userDtoClass,
                                                final List<T> cache) {}


public static <T, ID> T loadRelativeStub(final InvocationOnMock answer,
                                        final String folder,
                                        final Function<T, ID> getId,
                                        final Class<? extends T> userDtoClass) {}

public static <T, ID> T loadRelativeStub(final InvocationOnMock answer,
                                         final String folder,
                                         final Function<T, ID> getId,
                                         final Function<Object[], ID> idResolver,
                                         final Class<? extends T> userDtoClass) {}

public static <T, ID> T loadRelativeStub(final InvocationOnMock answer,
                                         final String folder,
                                         final Function<T, ID> getId,
                                         final Class<? extends T> userDtoClass,
                                         final List<T> cache) {}

public static <T, ID> T loadRelativeStub(final InvocationOnMock answer,
                                         final String folder,
                                         final Function<T, ID> getId,
                                         final Function<Object[], ID> idResolver,
                                         final Class<? extends T> userDtoClass,
                                         final List<T> cache) {}
]]>
</src>


<src name="loadRelativeStubIdResolver">
    <![CDATA[
    @Test
    public void loadRelativeStub_withIdResolver_shouldLoadMocks() {
        final List<UserDto> cache = new ArrayList<>();

        when(dao.search(anyString())).thenAnswer(answer -> UnitTestHelper.loadRelativeStub(answer,
                                                                                           "test/unitTestHelperStubTest",
                                                                                           UserDto::getId,
                                                                                           args -> {
                                                                                               if ("John".equalsIgnoreCase(String.valueOf(args[0]))) {
                                                                                                   return 1;
                                                                                               } else {
                                                                                                   return 2;
                                                                                               }
                                                                                           },
                                                                                           UserDto.class,
                                                                                           cache
        ));


        assertThat(dao.search("John").getFirstName()).isEqualTo("John");
        assertThat(dao.search("Albertine").getFirstName()).isEqualTo("Albertine");
    }
]]>
</src>



<!--*********************************************************************** 
* convertFromJson    
***********************************************************************-->


<src name="convertFromJsonJson">
    <![CDATA[
    {
        "firstName": "John",
        "lastName": "Smith",
        "creationDate": "2023-04-07T14:04:00"
    }
]]>
</src>

<src name="convertFromJsonUsage">
    <![CDATA[
    @Test
    public void loadJson_withTypeReference_shouldLoad() {
        final UserDto user = UnitTestHelper.loadJson("test/dto/user.1.json",  UserDto.class);
        assertThat(user.getFirstName()).isEquals("John");
    }
]]>
</src>

<src name="convertFromJsonMethods">
    <![CDATA[
    public static <T> T convertFromJson(final byte[] data, final TypeReference<T> refObjectType)  {}

    public static <T> T convertFromJson(final byte[] data, final Class<? extends T> objectType)  {}

    public static <T> T loadIntegrationJson(final String path, final TypeReference<T> refObjectType)  {}

    public static <T> T loadIntegrationJson(final String path, final Class<? extends T> objectType)  {}

    public static <T> T loadJson(final String relativePath, final TypeReference<T> refObjectType)  {}

    public static <T> T loadJson(final String relativePath, final Class<? extends T> objectType)  {}

    public static String forceConvertToJson(final Object value)  {}

    public static String convertToJson(final Object value)  {}

    public static String convertToJsonWithoutIndent(final Object value) {}

    public static <T> T convertFromJson(final String json, final TypeReference<T> refObjectType) {}

    public static <T> T convertFromJson(final String json, final Class<? extends T> objectType) {}
]]>
</src>

<!--*********************************************************************** 
* convertFromJson    
***********************************************************************-->
<src name="assertTextRef">
    <![CDATA[
    {
        "creationDate" : "2023-04-10T09:56:57",
        "firstName" : "John",
        "lastName" : "Foobar"
    }
]]>
</src>

<src name="assertTextUsage">
    <![CDATA[
    @Test
    public void someTest() {
        final UserDto user = UserDto.builder()
                                    .firstName("Joe")
                                    .lastName("Foobar")
                                    .creationDate(LocalDateTime.now())
                                    .build();

        UnitTestHelper.assertTextRelative(user, "test/dto/user_1_ref.json");
    }
]]>
</src>

<src name="assertTextUsageSkipLine">
    <![CDATA[
    @Test
    public void someTest() {
        final UserDto user = UserDto.builder()
                                    .firstName("John")
                                    .lastName("Foobar")
                                    .creationDate(LocalDateTime.now())
                                    .build();

        UnitTestHelper.assertTextRelative(user, "test/dto/user_1_ref.json", UnitTestHelper.buildSkipLines(1));
    }
]]>
</src>

<src name="assertTextUsageRegex">
    <![CDATA[
    @Test
    public void someTest() {
        final UserDto user = UserDto.builder()
                                    .firstName("John")
                                    .lastName("Foobar")
                                    .creationDate(LocalDateTime.now())
                                    .build();

        UnitTestHelper.assertTextRelative(user, "test/dto/user_1_ref.json",
                                          RegexLineMatcher.of("[0-9]{4}-[0-9]{2}-[0-9]{2}.*", 1));
    }
]]>
</src>



<src name="assertTextMethods">
    <![CDATA[
    public static void assertTextIntegration(final String value, final String path, final LineMatcher... lineMatchers) {}

    public static void assertTextIntegration(final Object value, final String path, final LineMatcher... lineMatchers) {}

    public static void assertTextRelative(final String value, final String path, final LineMatcher... lineMatchers)  {}

    public static void assertTextRelative(final Object value, final String path, final LineMatcher... lineMatchers)  {}

    public static void assertText(final Object value, final String jsonRef, final LineMatcher... lineMatchers)  {}

    public static void assertText(final String value, final String jsonRef, final LineMatcher... lineMatchers)  {}

    public static LineMatcher[] buildSkipLines(final int... skipLines)  {}
]]>
</src>

<!--*********************************************************************** 
* assertThrows    
***********************************************************************-->
<src name="assertThrowsUsage">
    <![CDATA[
    @Test
    public void assertThrowsError_withException_shouldMatch() {
        UnitTestHelper.assertThrows(NullPointerException.class, "some error", () -> {
            throw new NullPointerException("some error");
        });
    }
]]>
</src>

<src name="assertThrowsMethods">
    <![CDATA[
    public static void assertThrows(final ExecutableFunction handler) {}

    public static void assertThrows(final String errorMessage,
                                    final ExecutableFunction handler) {}

    public static void assertThrows(final Class<? extends Exception> errorClass,
                                    final ExecutableFunction handler) {}

    public static void assertThrows(final Class<? extends Exception> errorClass,
                                    final String errorMessage,
                                    final ExecutableFunction handler) {}

    public static void assertThrows(final ErrorCode errorCode, final ExecutableFunction handler) {}
]]>
</src>


<!--*********************************************************************** 
* LogTestAppender    
***********************************************************************-->
<src name="logTestAppenderUsage">
    <![CDATA[
    @Test
    public void manageException_withNullValue_shouldProduceThrowableProblem() {
        final List<BasicLogEvent> logs     = new ArrayList<>();
        final LogListener         listener = new DefaultLogListener(".*", logs::add);
        LogTestAppender.register(listener);

        final ResponseEntity<ThrowableProblem> result = buildService().manageException(exception);

        LogTestAppender.removeListener(listener);

        UnitTestHelper.assertTextRelative(result, "exception/exceptionHandlerServiceTest/manageException_withNullValue_shouldProduceThrowableProblem.json");
        UnitTestHelper.assertTextRelative(logs, "exception/exceptionHandlerServiceTest/manageException_withNullValue_shouldProduceThrowableProblem.log.json");
    }
]]>
</src>

<src name="logTestAppenderLogback">
    <![CDATA[
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>
    
        <appender name="logTest" class="io.inugami.commons.test.logs.LogTestAppender"></appender>
        
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{dd/MM HH:mm:ss} %5p [%c:%L] - %m%n</pattern>
            </encoder>
        </appender>
        
        <root level="DEBUG">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="logTest"/>
        </root>
    </configuration>
]]>
</src>


<src name="logTestAppenderDependencies">
    <![CDATA[
    <dependency>
        <groupId>io.inugami</groupId>
        <artifactId>inugami_commons_test</artifactId>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <scope>test</scope>
    </dependency>
]]>
</src>

<src name="logTestAppenderResult">
    <![CDATA[
    [ {
        "level" : "ERROR",
        "loggerName" : "io.inugami.monitoring.springboot.exception.DefaultExceptionHandlerService",
        "mdc" : {
          "errorType" : "technical",
          "errorCode" : "err-undefine",
          "errorStatus" : "500",
          "errorRollback" : "false",
          "errorExploitationError" : "false",
          "errorRetryable" : "false"
        },
        "message" : "undefined error"
      } ]
]]>
</src>


<!--*********************************************************************** 
***********************************************************************-->
</xml>
