<xml>

<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="builder">
    <![CDATA[
package io.inugami.api.models;
@FunctionalInterface
public interface Builder<T> {
    T build();
}
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="consumerWithException">
    <![CDATA[
    package io.inugami.api.functionnals;
    @FunctionalInterface
    public interface ConsumerWithException<T> {
        void process(T value) throws Exception;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="errorCodeResolver">
    <![CDATA[
    package io.inugami.api.exceptions;
    @FunctionalInterface
    public interface ErrorCodeResolver {
        ErrorCode resolve(Throwable exception);
    }
    
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="filterFunction">
    <![CDATA[
    package io.inugami.api.functionnals;
    @FunctionalInterface
    public interface FilterFunction<T> {
        boolean accept(T input);
    }    
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="functionWithException">
    <![CDATA[
    package io.inugami.api.functionnals;
    @FunctionalInterface
    public interface FunctionWithException<I, O, E extends Throwable> {
        O process(I input) throws E;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="jsonUnmarshalling">
    <![CDATA[
    package io.inugami.api.mapping;
    @FunctionalInterface
    public interface JsonUnmarshalling {
        <T> T process(String value);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="mapper">
    <![CDATA[
    package io.inugami.api.mapping;
    @FunctionalInterface
    public interface Mapper<OUT, IN> {
        OUT mapping(IN data);
    }    
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="postProcessing">
    <![CDATA[
    package io.inugami.api.mapping;
    @FunctionalInterface
    public interface PostProcessing<T> {
        void postProcessing(T context) throws TechnicalException;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="taskFinishListener">
    <![CDATA[
    package io.inugami.api.listeners;
    @FunctionalInterface
    public interface TaskFinishListener {
        void onFinish(long time,
                      long delais,
                      String name,
                      Object result,
                      Exception error);
    }    
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="taskStartListener">
    <![CDATA[
    package io.inugami.api.listeners;
    @FunctionalInterface
    public interface TaskStartListener {
        void onStart(long time, String name);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="triConsumer">
    <![CDATA[
    package io.inugami.api.functionnals;
    @FunctionalInterface
    public interface TriConsumer<F, S, T> {
        void accept(F firstValue, S secondValue, T thirdValue);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="validatorFunction">
    <![CDATA[
    package io.inugami.api.functionnals;
    @FunctionalInterface
    public interface ValidatorFunction<T, E extends Exception> {
        void validate(T input) throws E;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="VoidFunction">
    <![CDATA[
    package io.inugami.api.functionnals;
    @FunctionalInterface
    public interface VoidFunction {
        void process();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="VoidFunctionWithException">
    <![CDATA[
    package io.inugami.api.functionnals;
    @FunctionalInterface
    public interface VoidFunctionWithException {
        void process() throws Exception;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="stringDataCleaner">
    <![CDATA[
    package io.inugami.api.tools;
    @FunctionalInterface
    public interface StringDataCleaner {
        
        default boolean accept(String data) {
            return true;
        }
        
        String clean(String data);
        
        default String replaceAll(Pattern regex, String data, String replacement) {
            return StringTools.replaceAll(regex, data, replacement);
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="applyIfNotNull">
    <![CDATA[
    package io.inugami.api.functionnals;
    import java.util.function.Consumer;
    
    public interface ApplyIfNotNull {
        default <T> void applyIfNotNull(T data, Consumer<T> consumer) {
            if (data != null) {
                consumer.accept(data);
            }
        }
        
        default <T> void applyIfNotNull(T data,
                                        T defaultValue,
                                        Consumer<T> consumer) {
            consumer.accept(data == null ? defaultValue : data);
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="applyIfNotNullAndSameType">
    <![CDATA[
    package io.inugami.api.functionnals;
    public interface ApplyIfNotNullAndSameType {
        default <T, R> void ifNotNullAndSameType(T data, 
                                                 Function<? super T, ? extends R> mapper,
                                                 Consumer<R> consumer) {
            // ...
        }
        
        default Function<Object, String> buildStringMapper() {
            return v -> v instanceof String ? (String) v : null;
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="applyIfNull">
    <![CDATA[
    package io.inugami.api.functionnals;
    public interface ApplyIfNull {
        default <T> T applyIfNull(T data, Supplier<T> supplier) {
            // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="functionMustThrow">
    <![CDATA[
    package io.inugami.api.functionnals;

    public interface FunctionMustThrow {
        default void mustThrow(VoidFunctionWithException function) throws TechnicalException {
            // ..
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="exceptionWithErrorCode">
    <![CDATA[
    package io.inugami.api.exceptions;

    public interface ExceptionWithErrorCode {
        ErrorCode getErrorCode();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="jsonObject">
    <![CDATA[
    package io.inugami.api.models.data.basic;
    public interface JsonObject extends JsonObjectToJson, ClonableObject<JsonObject> {
        
        default <T extends JsonObject> T convertToObject(byte[] data, Charset encoding) {
            // ...
        }
        
        @Override
        default JsonObject cloneObj() {
           // ...
        }   
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="namedComponent">
    <![CDATA[
    package io.inugami.api.tools;
    public interface NamedComponent {
        default String getName() {
            return this.getClass().getSimpleName();
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="strategy">
    <![CDATA[
    package io.inugami.api.models.tools;
    public interface Strategy<IN, OUT> {
        boolean accept(IN inputData);
        
        OUT process(IN inputData) throws StrategyException;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="defaultStrategy">
    <![CDATA[
    package io.inugami.api.models.tools;
    @AllArgsConstructor
    @Builder
    public class DefaultStrategy<IN, OUT> implements Strategy<IN, OUT> {
    
        private final Function<IN, Boolean> accept;
        private final Function<IN, OUT>     process;
    
        @Override
        public boolean accept(final IN inputData) {
            return accept == null ? true : accept.apply(inputData);
        }
    
        @Override
        public OUT process(final IN inputData) throws StrategyException {
            return process == null ? null : process.apply(inputData);
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="dao">
    <![CDATA[
    package io.inugami.api.dao;
    public interface Dao extends Serializable {
        //@formatter:off
        
        /**
         * Allow to get a entity from uid .
         *
         * @param <E> Entity type
         * @param <PK> Entity UID type
         * @param type entity type class
         * @param uid entity uid
         * @return the entity
         * @throws DaoEntityNotFoundException if entity isn't found in datasource
         * @throws DaoException if exception is occur.
         */
         <E extends Identifiable<PK>, PK extends Serializable> 
         E getByUid(final Class<? extends E> type,final PK uid) throws DaoEntityNotFoundException, DaoException;
        
         /**
          * Allow to get entities by uid
          * @param type Entities type
          * @param uids  entities uids
          * @return empty or list of entities
          * @throws DaoEntityNotFoundException
          * @throws DaoException
          */
         <E extends Identifiable<PK>, PK extends Serializable> 
         List<E> getByUids(final Class<? extends E> type,final List<PK> uids) throws DaoEntityNotFoundException, DaoException;
         
        /**
         * Allow to get a entity.
         *
         * @param <E> Entity type
         * @param entity reference
         * @return the entity
         * @throws DaoEntityNotFoundException if entity isn't found in datasource
         * @throws DaoException if exception is occur.
         */
        <E extends Identifiable<PK>, PK extends Serializable> 
        E get(final E entity) throws DaoEntityNotFoundException,DaoException;
        
        // =====================================================================
        // REFRESH
        // =====================================================================
        /**
         * Refresh.
         * 
         * @param <E> the element type
         * @param entity the entity
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void refresh(final E entity) throws DaoEntityNotFoundException,DaoException;
        
        // =====================================================================
        // SAVE
        // =====================================================================
        /**
         * Save.
         * 
         * @param <E> the element type
         * @param entity the entity
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void save(final E entity, final Class<? extends E> type) throws DaoException;
        
        /**
         * Save.
         * 
         * @param <E> the element type
         * @param listEntity the list entity
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void save(final List<E> listEntity,final Class<? extends E> type) throws DaoException;
        
        // =====================================================================
        // MERGE
        // =====================================================================
        
        /**
         * Merge.
         * 
         * @param <E> the element type
         * @param entity the entity
         * @return the e
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable> 
        E merge(final E entity, final Class<? extends E> type) throws DaoException;
        
        /**
         * Merge.
         * 
         * @param <E> the element type
         * @param listEntity the list entity
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void merge(final List<E> listEntity, final Class<? extends E> type) throws DaoException;
        
        
        // =====================================================================
        // REGISTER
        // =====================================================================
        /**
         * Allow to register and save non existing entities or merge existing. 
         * @param entities  all entities to register
         * @param type entity class type
         * @throws DaoException if excpetion is occur
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        SaveEntitiesResult<E> register(final List<E> entities, final Class<? extends E> type) throws DaoException;
        
        
        // =====================================================================
        // FIND
        // =====================================================================
        
        /**
         * Find all.
         * 
         * @param <E> the element type
         * @param type the type
         * @return the list
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable> List<E> 
        findAll(Class<? extends E> type) throws DaoException;
        
        /**
         * Find.
         * 
         * @param <E> the element type
         * @param type the type
         * @param first the first
         * @param pageSize the page size
         * @param field the field
         * @param sortOrder the sort order
         * @param filters the filters
         * @return the list
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        List<E> find(Class<? extends E> type, final int first, final int pageSize, final String field,final String sortOrder,Map<String, String> filters) throws DaoException;
        
        // =====================================================================
        // COUNT
        // =====================================================================
        /**
         * Count.
         * 
         * @param type the type
         * @return the int
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable> 
        int count(final Class<? extends E> type) throws DaoException;
        
        /**
         * Count.
         * 
         * @param filters the filters
         * @param type the type
         * @return the int
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        int count(final Map<String, String> filters, final Class<? extends E> type) throws DaoException;
        
        // =====================================================================
        // DELETE
        // =====================================================================
        /**
         * Delete.
         * 
         * @param <E> the element type
         * @param <PK> the generic type
         * @param entity the entity
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void delete(E entity, final Class<? extends E> type) throws DaoEntityNotFoundException, DaoException;
        
        /**
         * Delete.
         * 
         * @param <E> the element type
         * @param <PK> the generic type
         * @param uid the uid
         * @param type the type
         * @throws DaoException the dao exception
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void delete(final PK uid,final Class<? extends E> type) throws DaoEntityNotFoundException,DaoException;
        
        /**
         * Allow to delete entities
         * 
         * @param entity
         * @param type
         * @throws DaoEntityNotFoundException
         * @throws DaoException
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void delete(final List<E> entity, final Class<? extends E> type) throws DaoEntityNotFoundException,DaoException;
        
        /**
         * Allow to delete entities by uids
         * 
         * @param uids
         * @param type
         * @throws DaoEntityNotFoundException
         * @throws DaoException
         */
        <E extends Identifiable<PK>, PK extends Serializable>
        void deleteByIds(final List<PK> uids, final Class<? extends E> type) throws DaoEntityNotFoundException,DaoException;
        
        //@formatter:on
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="futureData">
    <![CDATA[
    package io.inugami.api.providers.concurrent;
    public interface FutureData<T> {
        String getChannel();
        Future<T> getFuture();
        T getData();
        GenericEvent getEvent();
        long getTimeout();
        TimeUnit getTimeUnit();
        List<OnDoneFunction<T>> onDone();
        List<OnErrorFunction<T>> onError();   
        ProviderTask getTask();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="lifecycleBootstrap">
    <![CDATA[
    package io.inugami.api.providers.concurrent;
    public interface LifecycleBootstrap {
        void start();
        void shutdown();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="onDoneFunction">
    <![CDATA[
    package io.inugami.api.providers.concurrent;
    @FunctionalInterface
    public interface OnDoneFunction<T> {
        T onDone(T resultData,
                 GenericEvent currentEvent,
                 String channel);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="onErrorFunction">
    <![CDATA[
    package io.inugami.api.providers.concurrent;
    public interface OnErrorFunction<T> {
        T onError(GenericEvent event,
                  String channel,
                  Callable<ProviderFutureResult> task,
                  Exception error);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="onStart">
    <![CDATA[
    package io.inugami.api.providers.concurrent;
    @FunctionalInterface
    public interface OnStart {
        void process();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="aggregator">
    <![CDATA[
    package io.inugami.api.providers;
    public interface Aggregator {
        ProviderFutureResult aggregate(List<ProviderFutureResult> data) throws ProviderException;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="classBehaviorParametersSPI">
    <![CDATA[
    package io.inugami.api.processors;

    public interface ClassBehaviorParametersSPI {
        boolean accept(Class<?> clazz);
        <T> T build(ClassBehavior behavior, ConfigHandler<String, String> config);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="configHandler">
    <![CDATA[
    package io.inugami.api.processors;

    public interface ConfigHandler<K, V> extends Map<K, V> {
        V applyProperties(V value);
        String grabOrDefault(K key, String defaultValue);
        String grab(K key);
        String grab(String message, K key);
        Integer grab(K key, int defaultValue);
        Integer grabInt(K key);
        Integer grabInt(K key, Integer defaultValue);
        long grabLong(String key, long defaultValue);
        boolean grabBoolean(K key);
        boolean grabBoolean(K key, boolean defaultValue);
        Double grab(K key, double defaultValue);
        Double grabDouble(K key);
        <T> T grabJson(K key, String json, JsonUnmarshalling unmarshaller);
        <T> T grabJson(K key, JsonUnmarshalling unmarshaller);
        <T> T grabJson(K key, Object jsonObj, JsonUnmarshalling unmarshaller);
        ConfigHandler<K, V> optionnal();
        List<String> grabValues(String prefix);    
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="noForcingEventProvider">
    <![CDATA[
    package io.inugami.api.providers;

    public interface NoForcingEventProvider {   
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="processor">
    <![CDATA[
    package io.inugami.api.processors;
    public interface Processor extends NamedComponent {
        ProviderFutureResult process(GenericEvent event, ProviderFutureResult data) throws ProcessorException;
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="propertiesProducerSpi">
    <![CDATA[
    package io.inugami.api.spi;

    public interface PropertiesProducerSpi {
        Map<String, String> produce();
        
        default Map<String, String> producerFromClasses(Class<?>... classes) {
            // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="provider">
    <![CDATA[
    package io.inugami.api.providers;

    public interface Provider extends NamedComponent {
       
        <T extends SimpleEvent> FutureData<ProviderFutureResult> callEvent(T event, Gav pluginGav);
        
        ProviderFutureResult aggregate(List<ProviderFutureResult> data) throws ProviderException;
        
        String getType();
        
        default long getTimeout() {
            return 0l;
        }
        
        default ConfigHandler<String, String> getConfig() {
            return null;
        }
    }
    ]]>
</src>
<src name="genericEvent">
    <![CDATA[
    public class GenericEvent implements Serializable, ClonableObject<GenericEvent> {
    
        // =========================================================================
        // ATTRIBUTES
        // =========================================================================
        /** The Constant serialVersionUID. */
        private static final long          serialVersionUID = -355683229478830003L;
        
        @XStreamAsAttribute
        private final String               name;
        
        @XStreamAsAttribute
        protected String                   fromFirstTime;
        
        @XStreamAsAttribute
        protected String                   from;
        
        @XStreamAsAttribute
        private String                     until;
        
        @XStreamAsAttribute
        private String                     provider;
        
        @XStreamAsAttribute
        private String                     mapper;
        
        @XStreamImplicit
        private final List<ProcessorModel> processors;
        
        @XStreamImplicit
        private final List<AlertingModel>  alertings;
        
        // =========================================================================
        // CONSTRUCTORS
        // =========================================================================
        public GenericEvent() {
                    // implementation
        }
        
        public GenericEvent(final String name) {
                    // implementation
        }
        
        public GenericEvent(final String name,
                            final String from,
                            final String unitl,
                            final String provider,
                            final List<ProcessorModel> processors,
                            final String mapper,
                            final List<AlertingModel> alertings) {
                    // implementation
        }
        
        // =========================================================================
        // OVERRIDES
        // =========================================================================
        @Override
        public String toString() {
                    // implementation
        }
        
        @Override
        public int hashCode() {
            // implementation
        }
        
        @Override
        public boolean equals(final Object obj) {
            // implementation
        }
        
        // =========================================================================
        // GETTERS & SETTERS
        // =========================================================================
        public String getName() {
            return name;
        }
        
        public Optional<String> getFrom() {
            return Optional.ofNullable(from);
        }
        
        public Optional<String> getProvider() {
            return Optional.ofNullable(provider);
        }
        
        public Optional<List<ProcessorModel>> getProcessors() {
            return Optional.ofNullable(processors);
        }
        
        public Optional<String> getUntil() {
            return Optional.ofNullable(until);
        }
        
        public Optional<String> getFromFirstTime() {
            return Optional.ofNullable(fromFirstTime);
        }
        
        public void buildFrom(final String from) {
            this.from = from;
        }
        
        public void buildUntil(final String until) {
            this.until = until;
        }
        
        public void buildProvider(final String provider) {
            this.provider = provider;
        }
        
        public void buildFromFirstTime(final String fromFirstTime) {
            this.fromFirstTime = fromFirstTime;
        }
        
        public Optional<String> getMapper() {
            return Optional.ofNullable(mapper);
        }
        
        public void buildMapper(final String mapper) {
            this.mapper = mapper;
        }
        
        public Optional<List<AlertingModel>> getAlertings() {
            return Optional.ofNullable(alertings);
        }
        
        @Override
        public GenericEvent cloneObj() {
            // implementation
        }
        
    }
    ]]>
</src>

<src name="SimpleEvent">
    <![CDATA[
   @XStreamAlias("simple-event")
   public class SimpleEvent extends GenericEvent {
       
       // =========================================================================
       // ATTRIBUTES
       // =========================================================================
       private static final long serialVersionUID = -1139191592954226047L;
       
       private final String      query;
       
       @XStreamOmitField
       private final String      parent;
       
       @XStreamAsAttribute
       private String            scheduler;
       
       // =========================================================================
       // CONSTRUCTORS
       // =========================================================================
       public SimpleEvent() {
           // implementation
       }
       
       public SimpleEvent(final String name,
                          final String from,
                          final String until,
                          final String provider,
                          final List<ProcessorModel> processors,
                          final String query,
                          final String parent,
                          final String scheduler,
                          final String mapper,
                          final List<AlertingModel> alertings) {
           // implementation
       }
       
       @Override
       public GenericEvent cloneObj() {
           // implementation
       }
       
       // =========================================================================
       // GETTERS & SETTERS
       // =========================================================================
       public String getQuery() {
           return query;
       }
       
       public Optional<String> getParent() {
           return parent == null ? Optional.empty() : Optional.of(parent);
       }
       
       public String getScheduler() {
           return scheduler;
       }
       
       public void setScheduler(final String scheduler) {
           this.scheduler = scheduler;
       }
       
       // =========================================================================
       // FOR MAPPING
       // =========================================================================
       @Override
       public String getName() {
           return super.getName();
       }
       
       @Override
       public Optional<String> getFrom() {
           return super.getFrom();
       }
       
       @Override
       public Optional<String> getProvider() {
           return super.getProvider();
       }
       
       @Override
       public Optional<List<ProcessorModel>> getProcessors() {
           return super.getProcessors();
       }
       
       @Override
       public Optional<String> getUntil() {
           return super.getUntil();
       }
       
       @Override
       public Optional<String> getFromFirstTime() {
           return super.getFromFirstTime();
       }
       
       @Override
       public void buildFrom(final String from) {
           super.buildFrom(from);
       }
       
       @Override
       public void buildUntil(final String until) {
           super.buildUntil(until);
       }
       
       @Override
       public void buildProvider(final String provider) {
           super.buildProvider(provider);
       }
       
       @Override
       public void buildFromFirstTime(final String fromFirstTime) {
           super.buildFromFirstTime(fromFirstTime);
       }
       
       @Override
       public Optional<String> getMapper() {
           return super.getMapper();
       }
       
       @Override
       public void buildMapper(final String mapper) {
           super.buildMapper(mapper);
       }
       
       @Override
       public Optional<List<AlertingModel>> getAlertings() {
           return super.getAlertings();
       }
       
   }
   
    ]]>
</src>
<src name="Event">
    <![CDATA[
    @XStreamAlias("event")
    public class Event extends GenericEvent {
        
        // =========================================================================
        // ATTRIBUTES
        // =========================================================================
        /** The Constant serialVersionUID. */
        private static final long        serialVersionUID = 1783705856498891253L;
        
        @XStreamImplicit
        private final List<TargetConfig> targets;
        
        @XStreamAsAttribute
        private String                   scheduler;
        
        // =========================================================================
        // CONSTRUCTORS
        // =========================================================================
        public Event() {
            super();
            targets = new ArrayList<>();
        }
        
        //@formatter:off
        public Event(final String name,
                     final String from,
                     final String until,
                     final String provider,
                     final List<ProcessorModel> processors,
                     final List<TargetConfig> targets, 
                     final String scheduler,
                     final String mapper,
                     final List<AlertingModel> alertings) {
            // implementation
        }
        
        @Override
        public GenericEvent cloneObj() {
            // implementation
        }
        
        // =========================================================================
        // GETTERS
        // =========================================================================
        public List<TargetConfig> getTargets() {
            // implementation
        }
        
        public String getScheduler() {
            return scheduler;
        }
        
        public void setScheduler(final String scheduler) {
            this.scheduler = scheduler;
        }
        
    }
    ]]>
</src>
<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="providerCallbackOnError">
    <![CDATA[
    package io.inugami.api.providers;
    @FunctionalInterface
    public interface ProviderCallbackOnError {
        void process(Exception error);
    }
    ]]>
</src>
<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="ProviderCallbackOnSuccess">
    <![CDATA[
    package io.inugami.api.providers;
    @FunctionalInterface
    public interface ProviderCallbackOnSuccess {
        void sendData(String data);
    }
    ]]>
</src>

<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="providerForce">
    <![CDATA[
    package io.inugami.api.providers;
    public interface ProviderForce {
        <T extends SimpleEvent> ProviderFutureResult callEvent(T event);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="providerRunner">
    <![CDATA[
    package io.inugami.api.providers;

    public interface ProviderRunner {
        Future<ProviderFutureResult> run(String name, ProviderTask tasks);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="providerTask">
    <![CDATA[
    package io.inugami.api.providers.task;

    public interface ProviderTask extends Callable<ProviderFutureResult> {
        
        @Override
        default ProviderFutureResult call() throws Exception {
            return callProvider();
        }
        GenericEvent getEvent();
        Gav getPluginGav();
        ProviderFutureResult callProvider();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="providerWithHttpConnector">
    <![CDATA[
    package io.inugami.api.providers;

    public interface ProviderWithHttpConnector {
    
        default int getTimeout(ConfigHandler<String, String> config, int defaultValue) {
           // ...
        }
        
        default int getTimeout(ConfigHandler<String, String> config, String name, int defaultValue) {
         // ...
        }
        
        default int getMaxConnections(ConfigHandler<String, String> config, int defaultValue) {
         // ...
        }
        
        default int getMaxConnections(ConfigHandler<String, String> config, String name,
                                      int defaultValue) {
         // ...
        }
        
        default int getTTL(ConfigHandler<String, String> config, int defaultValue) {
         // ...
        }
        
        default int getTTL(ConfigHandler<String, String> config, String name, int defaultValue) {
          // ...
        }
        
        default int getMaxPerRoute(ConfigHandler<String, String> config, int defaultValue) {
          // ...
        }
        
        default int getMaxPerRoute(ConfigHandler<String, String> config, String name, int defaultValue) {
          // ...
        }
        
        default int getSocketTimeout(ConfigHandler<String, String> config, int defaultValue) {
          // ...
        }
        
        default int getSocketTimeout(ConfigHandler<String, String> config, String name,
                                     int defaultValue) {
         // ...
        }
        
        default String buildConfigKey(String baseName, String name) {
          // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="providerWriter">
    <![CDATA[
    package io.inugami.api.providers;
    public interface ProviderWriter {
        void write(JsonObject data);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="spiConfigurable">
    <![CDATA[
    package io.inugami.api.spi;
    public interface SpiConfigurable {
        
        default String grabConfig(String key, ConfigHandler<String, String> configuration) {
            // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="bootstrapMonitoringSpi">
    <![CDATA[
    package io.inugami.api.monitoring;
    public interface BootstrapMonitoringSpi {
        void startup();
        void shutdown();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="genericMonitoringModel">
    <![CDATA[
    package io.inugami.api.monitoring.models;

    public interface GenericMonitoringModel extends JsonObject{
        String getAsset();
        String getEnvironment() ;
        String getInstanceName() ;
        String getInstanceNumber();
        String getCounterType();
        String getDevice() ;
        String getCallType();
        String getService() ;
        String getSubService() ;
        String getValueType();
        String getTimeUnit() ;
        Date getDate();
        long getTime() ;
        String getErrorCode() ;
        String getErrorType();
        GraphiteNumber getValue();
        String getPath();
        String getData();
        String getNonTemporalHash();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="monitoringFilterInterceptor">
    <![CDATA[
    package io.inugami.api.monitoring.interceptors;

    public interface MonitoringFilterInterceptor extends NamedSpi, MonitoringInitializer {
        MonitoringFilterInterceptor buildInstance(ConfigHandler<String, String> configuration);
        
        default List<GenericMonitoringModel> onBegin(ResquestData request) {
            return null;
        }
        
        default List<GenericMonitoringModel> onDone(ResquestData request,
                                                    ResponseData response,
                                                    ErrorResult error) {
            return null;
        }
        
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="monitoringInitializer">
    <![CDATA[
    package io.inugami.api.monitoring;
    public interface MonitoringInitializer {
        default void initialize() {
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="monitoringLoaderSpi">
    <![CDATA[
    package io.inugami.api.monitoring;
    public interface MonitoringLoaderSpi {
        Monitoring load();
    }
    
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="monitoringSender">
    <![CDATA[
    package io.inugami.api.monitoring.senders;
    public interface MonitoringSender extends NamedSpi {
        
        MonitoringSender buildInstance(ConfigHandler<String, String> configuration);
        
        void process(List<GenericMonitoringModel> data) throws MonitoringSenderException;
        
        default void shutdown() {}
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="monitoringSensor">
    <![CDATA[
    package io.inugami.api.monitoring.sensors;
    public interface MonitoringSensor extends NamedSpi {
        
        MonitoringSensor buildInstance(long interval,
                                       String query,
                                       ConfigHandler<String, String> configuration);
        
        long getInterval();
        List<GenericMonitoringModel> process();
        default void shutdown() {
        }   
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="errorCode">
    <![CDATA[
    package io.inugami.api.exceptions;
    public interface ErrorCode {
    
        public ErrorCode getCurrentErrorCode();

        default int getStatusCode() {
            return getCurrentErrorCode() == null ? 500 : getCurrentErrorCode().getStatusCode();
        }
    
    
        default String getErrorCode() {
            return getCurrentErrorCode() == null ? "undefine" : getCurrentErrorCode().getErrorCode();
        }
    
    
        default String getMessage() {
            return getCurrentErrorCode() == null ? "error" : getCurrentErrorCode().getMessage();
        }
    
    
        default String getMessageDetail() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getMessageDetail();
        }
    
        default boolean isExploitationError() {
            return getCurrentErrorCode() == null ? false : getCurrentErrorCode().isExploitationError();
        }
    
        default String getErrorType() {
            return getCurrentErrorCode() == null ? "technical" : getCurrentErrorCode().getErrorType();
        }
    
    
        default String getPayload() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getPayload();
        }
        default String getUrl() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getUrl();
        }
    
    
        default boolean isRollbackRequire() {
            return getCurrentErrorCode() == null ? false : getCurrentErrorCode().isRollbackRequire();
        }
    
        default boolean isRetryable() {
            return getCurrentErrorCode() == null ? false : getCurrentErrorCode().isRetryable();
        }
    
        default BiConsumer<String, Exception> getErrorHandler() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getErrorHandler();
        }
    
        default ErrorCode addDetail(final String detail, Object... values) {
            return toBuilder().addMessageDetail(detail, values).build();
        }
        
        default String getCategory() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getCategory();
        }
    
        default String getField() {
            return getCurrentErrorCode() == null ? null : getCurrentErrorCode().getField();
        }
    
    
        default DefaultErrorCode.DefaultErrorCodeBuilder toBuilder() {
            DefaultErrorCode.DefaultErrorCodeBuilder builder = null;
            if (getCurrentErrorCode() == null) {
                builder = DefaultErrorCode.fromErrorCode(DefaultErrorCode.buildUndefineError());
            }
            else {
                builder = DefaultErrorCode.fromErrorCode(getCurrentErrorCode());
            }
            return builder;
        }    
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="errorCodeEnum">
    <![CDATA[
    import static io.inugami.api.exceptions.DefaultErrorCode.newBuilder;

    public enum CustomerError implements ErrorCode {
        CUSTOMER_ID_IS_REQUIRED(newBuilder()
                     .errorCode("CUST-1")
                     .statusCode(400)
                     .message("customer's id is required")
                     .category("customer")
                     .errorTypeFunctional()
                     ),
    
        CUSTOMER_NOT_ALLOWS(newBuilder()
                     .errorCode("CUST-2")
                     .statusCode(403)
                     .message("customer isn't allows to execute this function")
                     .category("customer")
                     .errorTypeSecurity()
                     ),
    
        ERROR_ON_SAVING_CUSTOMER(newBuilder()
                    .errorCode("CUST-2")
                    .statusCode(500)
                    .message("unable to save customer")
                    .category("customer")
                    )
        ;
    
        private ErrorCode errorCode;
    
        private CustomerError(DefaultErrorCode.DefaultErrorCodeBuilder errorBuilder) {
            errorCode = errorBuilder.build();
        }
    
        @Override
        public ErrorCode getCurrentErrorCode() {
            return errorCode;
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="errorCodeUsage">
    <![CDATA[
    public Customer getCustomerById(Long id){
        Asserts.notNull(CustomerError.CUSTOMER_ID_IS_REQUIRED, id);
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="asserts">
    <![CDATA[
    package io.inugami.api.exceptions;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public final class Asserts {
    // -------------------------------------------------------------------------
    // IS TRUE
    // -------------------------------------------------------------------------
    public static void assertTrue(final boolean expression) {}

    public static void assertTrue(final String message,
                                  final boolean expression) {}

    public static void assertTrue(final ErrorCode errorCode,
                                  final boolean expression) {}

    public static void assertTrue(final Supplier<String> messageProducer,
                                  final boolean expression) {}

    // -------------------------------------------------------------------------
    // IS FALSE
    // -------------------------------------------------------------------------
    public static void assertFalse(final boolean expression) {}

    public static void assertFalse(final String message,
                                   final boolean expression) {}

    public static void assertFalse(final Supplier<String> messageProducer,
                                   final boolean expression) {}

    public static void assertFalse(final ErrorCode errorCode,
                                   final boolean expression) {}

    // -------------------------------------------------------------------------
    // IS NULL
    // -------------------------------------------------------------------------
    public static void assertNull(final Object... objects) {}

    public static void assertNull(final String message,
                                  final Object... values) {}

    public static void assertNull(final Supplier<String> messageProducer,
                                  final Object... values) {}

    public static void assertNull(final ErrorCode errorCode,
                                  final Object... values) {}

    // -------------------------------------------------------------------------
    // NOT NULL
    // -------------------------------------------------------------------------
    public static void assertNotNull(final Object... objects) {}

    public static void assertNotNull(final String message,
                                     final Object... values) {}

    public static void assertNotNull(final Supplier<String> messageProducer,
                                     final Object... values) {}

    public static void assertNotNull(final ErrorCode errorCode,
                                     final Object... values) {}

    // -------------------------------------------------------------------------
    // NOT EMPTY
    // -------------------------------------------------------------------------
    public static void assertNotEmpty(final String value) {}

    public static void assertNotEmpty(final String message,
                                      final String value) {}

    public static void assertNotEmpty(final Supplier<String> messageProducer,
                                      final String value) {}

    public static void assertNotEmpty(final ErrorCode errorCode,
                                      final String value) {}

    public static boolean checkIsBlank(final String value) {}

    public static void assertNotEmpty(final Collection<?> value) {
        if (value == null || value.isEmpty()) {}

    public static void assertNotEmpty(final Supplier<String> messageProducer,
                                      final Collection<?> value) {}

    public static void assertNotEmpty(final String message,
                                      final Collection<?> value) {}

    public static void assertNotEmpty(final ErrorCode errorCode,
                                      final Collection<?> value) {}

    public static void assertNotEmpty(final IsEmptyFacet value) {}

    public static void assertNotEmpty(final String message,
                                      final IsEmptyFacet value) {}

    public static void assertNotEmpty(final Supplier<String> messageProducer,
                                      final IsEmptyFacet value) {}

    public static void assertNotEmpty(final ErrorCode errorCode,
                                      final IsEmptyFacet value) {}

    public static void assertNotEmpty(final Map<?, ?> value) {
        if (value == null || value.isEmpty()) {}

    public static void assertNotEmpty(final String message,
                                      final Map<?, ?> value) {}

    public static void assertNotEmpty(final Supplier<String> messageProducer,
                                      final Map<?, ?> value) {}

    public static void assertNotEmpty(final ErrorCode errorCode,
                                      final Map<?, ?> value) {}

    // -------------------------------------------------------------------------
    // EMPTY
    // -------------------------------------------------------------------------
    public static void assertEmpty(final String value) {}

    public static void assertEmpty(final String message,
                                   final String value) {}

    public static void assertEmpty(final Supplier<String> messageProducer,
                                   final String value) {}

    public static void assertEmpty(final ErrorCode errorCode,
                                   final String value) {}

    public static void assertEmpty(final Collection<?> value) {}

    public static void assertEmpty(final Supplier<String> messageProducer,
                                   final Collection<?> value) {}

    public static void assertEmpty(final String message,
                                   final Collection<?> value) {}

    public static void assertEmpty(final ErrorCode errorCode,
                                   final Collection<?> value) {}

    public static void assertEmpty(final Map<?, ?> value) {}

    public static void assertEmpty(final String message,
                                   final Map<?, ?> value) {}

    public static void assertEmpty(final Supplier<String> messageProducer,
                                   final Map<?, ?> value) {}

    public static void assertEmpty(final ErrorCode errorCode,
                                   final Map<?, ?> value) {}

    public static void assertEmpty(final IsEmptyFacet value) {}

    public static void assertEmpty(final Supplier<String> messageProducer,
                                   final IsEmptyFacet value) {}

    public static void assertEmpty(final String message,
                                   final IsEmptyFacet value) {}

    public static void assertEmpty(final ErrorCode errorCode,
                                   final IsEmptyFacet value) {}

    // -------------------------------------------------------------------------
    // EQUALS
    // -------------------------------------------------------------------------
    public static void assertEquals(final Object ref,
                                    final Object value) {}

    public static void assertEquals(final String message,
                                    final Object ref,
                                    final Object value) {}

    public static void assertEquals(final Supplier<String> messageProducer,
                                    final Object ref,
                                    final Object value) {}

    public static void assertEquals(final ErrorCode errorCode,
                                    final Object ref,
                                    final Object value) {}

    public static void assertEquals(final int ref,
                                    final int value) {}

    public static void assertEquals(final String message,
                                    final int ref,
                                    final int value) {}

    public static void assertEquals(final Supplier<String> messageProducer,
                                    final int ref,
                                    final int value) {}

    public static void assertEquals(final ErrorCode errorCode,
                                    final int ref,
                                    final int value) {}

    public static void assertEquals(final long ref,
                                    final long value) {}

    public static void assertEquals(final String message,
                                    final long ref,
                                    final long value) {}

    public static void assertEquals(final Supplier<String> messageProducer,
                                    final long ref,
                                    final long value) {}

    public static void assertEquals(final ErrorCode errorCode,
                                    final long ref,
                                    final long value) {}

    public static void assertEquals(final float ref,
                                    final float value) {}

    public static void assertEquals(final String message,
                                    final float ref,
                                    final float value) {}

    public static void assertEquals(final Supplier<String> messageProducer,
                                    final float ref,
                                    final float value) {}

    public static void assertEquals(final ErrorCode errorCode,
                                    final float ref,
                                    final float value) {}

    public static void assertEquals(final double ref,
                                    final double value) {}

    public static void assertEquals(final String message,
                                    final double ref,
                                    final double value) {}

    public static void assertEquals(final Supplier<String> messageProducer,
                                    final double ref,
                                    final double value) {}

    public static void assertEquals(final ErrorCode errorCode,
                                    final double ref,
                                    final double value) {}


    // -------------------------------------------------------------------------
    // NOT EQUALS
    // -------------------------------------------------------------------------
    public static void assertNotEquals(final Object ref,
                                       final Object value) {}

    public static void assertNotEquals(final String message,
                                       final Object ref,
                                       final Object value) {}

    public static void assertNotEquals(final Supplier<String> messageProducer,
                                       final Object ref,
                                       final Object value) {}

    public static void assertNotEquals(final ErrorCode errorCode,
                                       final Object ref,
                                       final Object value) {}

    public static void assertNotEquals(final int ref,
                                       final int value) {}

    public static void assertNotEquals(final String message,
                                       final int ref,
                                       final int value) {}

    public static void assertNotEquals(final Supplier<String> messageProducer,
                                       final int ref,
                                       final int value) {}

    public static void assertNotEquals(final ErrorCode errorCode,
                                       final int ref,
                                       final int value) {}

    public static void assertNotEquals(final long ref,
                                       final long value) {}

    public static void assertNotEquals(final String message,
                                       final long ref,
                                       final long value) {}

    public static void assertNotEquals(final Supplier<String> messageProducer,
                                       final long ref,
                                       final long value) {}

    public static void assertNotEquals(final ErrorCode errorCode,
                                       final long ref,
                                       final long value) {}

    public static void assertNotEquals(final float ref,
                                       final float value) {}

    public static void assertNotEquals(final String message,
                                       final float ref,
                                       final float value) {}

    public static void assertNotEquals(final Supplier<String> messageProducer,
                                       final float ref,
                                       final float value) {}

    public static void assertNotEquals(final ErrorCode errorCode,
                                       final float ref,
                                       final float value) {}

    public static void assertNotEquals(final double ref,
                                       final double value) {}

    public static void assertNotEquals(final String message,
                                       final double ref,
                                       final double value) {}


    public static void assertNotEquals(final Supplier<String> messageProducer,
                                       final double ref,
                                       final double value) {}


    public static void assertNotEquals(final ErrorCode errorCode,
                                       final double ref,
                                       final double value) {}


    // -------------------------------------------------------------------------
    // LOWER
    // -------------------------------------------------------------------------
    public static void assertLower(final int ref,
                                   final int value) {}

    public static void assertLower(final String message,
                                   final int ref,
                                   final int value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final int ref,
                                   final int value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final int ref,
                                   final int value) {}

    // ------------------------------------------------------------------------
    public static void assertLower(final long ref,
                                   final long value) {}

    public static void assertLower(final String message,
                                   final long ref,
                                   final long value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final long ref,
                                   final long value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final long ref,
                                   final long value) {}

    // ------------------------------------------------------------------------
    public static void assertLower(final float ref,
                                   final float value) {}

    public static void assertLower(final String message,
                                   final float ref,
                                   final float value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final float ref,
                                   final float value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final float ref,
                                   final float value) {}

    // ------------------------------------------------------------------------
    public static void assertLower(final double ref,
                                   final double value) {}

    public static void assertLower(final String message,
                                   final double ref,
                                   final double value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final double ref,
                                   final double value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final double ref,
                                   final double value) {}

    // ------------------------------------------------------------------------
    public static void assertLower(final Integer ref,
                                   final Integer value) {}

    public static void assertLower(final String message,
                                   final Integer ref,
                                   final Integer value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final Integer ref,
                                   final Integer value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final Integer ref,
                                   final Integer value) {}

    // ------------------------------------------------------------------------
    public static void assertLower(final Long ref,
                                   final Long value) {}

    public static void assertLower(final String message,
                                   final Long ref,
                                   final Long value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final Long ref,
                                   final Long value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final Long ref,
                                   final Long value) {}

    // ------------------------------------------------------------------------
    public static void assertLower(final Double ref,
                                   final Double value) {}

    public static void assertLower(final String message,
                                   final Double ref,
                                   final Double value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final Double ref,
                                   final Double value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final Double ref,
                                   final Double value) {}

    // ------------------------------------------------------------------------
    public static void assertLower(final BigDecimal ref,
                                   final BigDecimal value) {}

    public static void assertLower(final String message,
                                   final BigDecimal ref,
                                   final BigDecimal value) {}

    public static void assertLower(final Supplier<String> messageProducer,
                                   final BigDecimal ref,
                                   final BigDecimal value) {}

    public static void assertLower(final ErrorCode errorCode,
                                   final BigDecimal ref,
                                   final BigDecimal value) {}

    // -------------------------------------------------------------------------
    // LOWER OR EQUALS
    // -------------------------------------------------------------------------
    public static void assertLowerOrEquals(final int ref,
                                           final int value) {}

    public static void assertLowerOrEquals(final String message,
                                           final int ref,
                                           final int value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final int ref,
                                           final int value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final int ref,
                                           final int value) {}

    // ------------------------------------------------------------------------
    public static void assertLowerOrEquals(final long ref,
                                           final long value) {}

    public static void assertLowerOrEquals(final String message,
                                           final long ref,
                                           final long value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final long ref,
                                           final long value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final long ref,
                                           final long value) {}

    // ------------------------------------------------------------------------
    public static void assertLowerOrEquals(final float ref,
                                           final float value) {}

    public static void assertLowerOrEquals(final String message,
                                           final float ref,
                                           final float value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final float ref,
                                           final float value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final float ref,
                                           final float value) {}

    // ------------------------------------------------------------------------
    public static void assertLowerOrEquals(final double ref,
                                           final double value) {}

    public static void assertLowerOrEquals(final String message,
                                           final double ref,
                                           final double value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final double ref,
                                           final double value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final double ref,
                                           final double value) {}

    // ------------------------------------------------------------------------
    public static void assertLowerOrEquals(final Integer ref,
                                           final Integer value) {}

    public static void assertLowerOrEquals(final String message,
                                           final Integer ref,
                                           final Integer value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final Integer ref,
                                           final Integer value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final Integer ref,
                                           final Integer value) {}

    // ------------------------------------------------------------------------
    public static void assertLowerOrEquals(final Long ref,
                                           final Long value) {}

    public static void assertLowerOrEquals(final String message,
                                           final Long ref,
                                           final Long value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final Long ref,
                                           final Long value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final Long ref,
                                           final Long value) {}

    // ------------------------------------------------------------------------
    public static void assertLowerOrEquals(final Double ref,
                                           final Double value) {}

    public static void assertLowerOrEquals(final String message,
                                           final Double ref,
                                           final Double value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final Double ref,
                                           final Double value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final Double ref,
                                           final Double value) {}

    // ------------------------------------------------------------------------
    public static void assertLowerOrEquals(final BigDecimal ref,
                                           final BigDecimal value) {}

    public static void assertLowerOrEquals(final String message,
                                           final BigDecimal ref,
                                           final BigDecimal value) {}

    public static void assertLowerOrEquals(final Supplier<String> messageProducer,
                                           final BigDecimal ref,
                                           final BigDecimal value) {}

    public static void assertLowerOrEquals(final ErrorCode errorCode,
                                           final BigDecimal ref,
                                           final BigDecimal value) {}

    // -------------------------------------------------------------------------
    // HIGHER
    // -------------------------------------------------------------------------
    public static void assertHigher(final int ref,
                                    final int value) {}

    public static void assertHigher(final String message,
                                    final int ref,
                                    final int value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final int ref,
                                    final int value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final int ref,
                                    final int value) {}

    // ------------------------------------------------------------------------
    public static void assertHigher(final long ref,
                                    final long value) {}

    public static void assertHigher(final String message,
                                    final long ref,
                                    final long value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final long ref,
                                    final long value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final long ref,
                                    final long value) {}

    // ------------------------------------------------------------------------
    public static void assertHigher(final float ref,
                                    final float value) {}

    public static void assertHigher(final String message,
                                    final float ref,
                                    final float value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final float ref,
                                    final float value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final float ref,
                                    final float value) {}

    // ------------------------------------------------------------------------
    public static void assertHigher(final double ref,
                                    final double value) {}

    public static void assertHigher(final String message,
                                    final double ref,
                                    final double value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final double ref,
                                    final double value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final double ref,
                                    final double value) {}

    // ------------------------------------------------------------------------
    public static void assertHigher(final Integer ref,
                                    final Integer value) {}

    public static void assertHigher(final String message,
                                    final Integer ref,
                                    final Integer value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final Integer ref,
                                    final Integer value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final Integer ref,
                                    final Integer value) {}

    // ------------------------------------------------------------------------
    public static void assertHigher(final Long ref,
                                    final Long value) {}

    public static void assertHigher(final String message,
                                    final Long ref,
                                    final Long value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final Long ref,
                                    final Long value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final Long ref,
                                    final Long value) {}

    // ------------------------------------------------------------------------
    public static void assertHigher(final Double ref,
                                    final Double value) {}

    public static void assertHigher(final String message,
                                    final Double ref,
                                    final Double value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final Double ref,
                                    final Double value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final Double ref,
                                    final Double value) {}

    // ------------------------------------------------------------------------
    public static void assertHigher(final BigDecimal ref,
                                    final BigDecimal value) {}

    public static void assertHigher(final String message,
                                    final BigDecimal ref,
                                    final BigDecimal value) {}

    public static void assertHigher(final Supplier<String> messageProducer,
                                    final BigDecimal ref,
                                    final BigDecimal value) {}

    public static void assertHigher(final ErrorCode errorCode,
                                    final BigDecimal ref,
                                    final BigDecimal value) {}

    // -------------------------------------------------------------------------
    // assertHigherOrEquals
    // -------------------------------------------------------------------------
    public static void assertHigherOrEquals(final int ref,
                                            final int value) {}

    public static void assertHigherOrEquals(final String message,
                                            final int ref,
                                            final int value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final int ref,
                                            final int value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final int ref,
                                            final int value) {}

    // ------------------------------------------------------------------------
    public static void assertHigherOrEquals(final long ref,
                                            final long value) {}

    public static void assertHigherOrEquals(final String message,
                                            final long ref,
                                            final long value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final long ref,
                                            final long value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final long ref,
                                            final long value) {}

    // ------------------------------------------------------------------------
    public static void assertHigherOrEquals(final float ref,
                                            final float value) {}

    public static void assertHigherOrEquals(final String message,
                                            final float ref,
                                            final float value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final float ref,
                                            final float value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final float ref,
                                            final float value) {}

    // ------------------------------------------------------------------------
    public static void assertHigherOrEquals(final double ref,
                                            final double value) {}

    public static void assertHigherOrEquals(final String message,
                                            final double ref,
                                            final double value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final double ref,
                                            final double value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final double ref,
                                            final double value) {}

    // ------------------------------------------------------------------------
    public static void assertHigherOrEquals(final Integer ref,
                                            final Integer value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final Integer ref,
                                            final Integer value) {}

    public static void assertHigherOrEquals(final String message,
                                            final Integer ref,
                                            final Integer value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final Integer ref,
                                            final Integer value) {}

    // ------------------------------------------------------------------------
    public static void assertHigherOrEquals(final Long ref,
                                            final Long value) {}

    public static void assertHigherOrEquals(final String message,
                                            final Long ref,
                                            final Long value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final Long ref,
                                            final Long value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final Long ref,
                                            final Long value) {}

    // ------------------------------------------------------------------------
    public static void assertHigherOrEquals(final Double ref,
                                            final Double value) {}

    public static void assertHigherOrEquals(final String message,
                                            final Double ref,
                                            final Double value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final Double ref,
                                            final Double value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final Double ref,
                                            final Double value) {}

    // ------------------------------------------------------------------------
    public static void assertHigherOrEquals(final BigDecimal ref,
                                            final BigDecimal value) {}

    public static void assertHigherOrEquals(final String message,
                                            final BigDecimal ref,
                                            final BigDecimal value) {}

    public static void assertHigherOrEquals(final Supplier<String> messageProducer,
                                            final BigDecimal ref,
                                            final BigDecimal value) {}

    public static void assertHigherOrEquals(final ErrorCode errorCode,
                                            final BigDecimal ref,
                                            final BigDecimal value) {}


    // -------------------------------------------------------------------------
    // REGEX
    // -------------------------------------------------------------------------
    public static void assertRegexMatch(final Pattern regex,
                                        final String value) {}

    public static void assertRegexMatch(final String message,
                                        final Pattern regex,
                                        final String value) {}

    public static void assertRegexMatch(final Supplier<String> messageProducer,
                                        final Pattern regex,
                                        final String value) {}

    public static void assertRegexMatch(final ErrorCode errorCode,
                                        final Pattern regex,
                                        final String value) {}

    public static void assertRegexMatch(final String regex,
                                        final String value) {}

    public static void assertRegexMatch(final String message,
                                        final String regex,
                                        final String value) {}

    public static void assertRegexMatch(final Supplier<String> messageProducer,
                                        final String regex,
                                        final String value) {}

    public static void assertRegexMatch(final ErrorCode errorCode,
                                        final String regex,
                                        final String value) {}

    public static void assertRegexNotMatch(final Pattern regex,
                                           final String value) {}

    public static void assertRegexNotMatch(final String message,
                                           final Pattern regex,
                                           final String value) {}

    public static void assertRegexNotMatch(final Supplier<String> messageProducer,
                                           final Pattern regex,
                                           final String value) {}

    public static void assertRegexNotMatch(final ErrorCode errorCode,
                                           final Pattern regex,
                                           final String value) {}

    public static void assertRegexNotMatch(final String regex,
                                           final String value) {}

    public static void assertRegexNotMatch(final String message,
                                           final String regex,
                                           final String value) {}

    public static void assertRegexNotMatch(final Supplier<String> messageProducer,
                                           final String regex,
                                           final String value) {}

    public static void assertRegexNotMatch(final ErrorCode errorCode,
                                           final String regex,
                                           final String value) {}

    public static void assertRegexFind(final Pattern regex,
                                       final String value) {}

    public static void assertRegexFind(final String message,
                                       final Pattern regex,
                                       final String value) {}

    public static void assertRegexFind(final Supplier<String> messageProducer,
                                       final Pattern regex,
                                       final String value) {}

    public static void assertRegexFind(final ErrorCode errorCode,
                                       final Pattern regex,
                                       final String value) {}

    public static void assertRegexFind(final String regex,
                                       final String value) {}

    public static void assertRegexFind(final String message,
                                       final String regex,
                                       final String value) {}


    public static void assertRegexFind(final Supplier<String> messageProducer,
                                       final String regex,
                                       final String value) {}

    public static void assertRegexFind(final ErrorCode errorCode,
                                       final String regex,
                                       final String value) {}

    public static void assertRegexNotFind(final Pattern regex,
                                          final String value) {}

    public static void assertRegexNotFind(final String message,
                                          final Pattern regex,
                                          final String value) {}

    public static void assertRegexNotFind(final Supplier<String> messageProducer,
                                          final Pattern regex,
                                          final String value) {}

    public static void assertRegexNotFind(final ErrorCode errorCode,
                                          final Pattern regex,
                                          final String value) {}

    public static void assertRegexNotFind(final String regex,
                                          final String value) {}

    public static void assertRegexNotFind(final String message,
                                          final String regex,
                                          final String value) {}

    public static void assertRegexNotFind(final Supplier<String> messageProducer,
                                          final String regex,
                                          final String value) {}

    public static void assertRegexNotFind(final ErrorCode errorCode,
                                          final String regex,
                                          final String value) {}

    public static List<ErrorCode> checkModel(final VoidFunctionWithException... assertions) {}

    public static List<ErrorCode> checkModel(final List<VoidFunctionWithException> assertions) {}

    public static void assertModel(final VoidFunctionWithException... assertions) {}

    public static void assertModel(final List<VoidFunctionWithException> assertions) {}


    // -------------------------------------------------------------------------
    // Assert throws
    // -------------------------------------------------------------------------
    public static void assertThrow(final String message,
                                   final VoidFunctionWithException function) {}


    // -------------------------------------------------------------------------
    // Assert file
    // -------------------------------------------------------------------------
    public static void assertFileExists(final File path) {}

    public static void assertFileExists(final String message, final File path) {}

    public static void assertFileExists(final ErrorCode errorCode, final File path) {}

    public static void assertFileReadable(final File path) {}

    public static void assertFileReadable(final String message, final File path) {}

    public static void assertFileReadable(final ErrorCode errorCode, final File path) {}

    public static void assertFileWrite(final File path) {}

    public static void assertFileWrite(final String message, final File path) {}

    public static void assertFileWrite(final ErrorCode errorCode, final File path) {}

    public static void assertFileExecutable(final File path) {}

    public static void assertFileExecutable(final String message, final File path) {}

    public static void assertFileExecutable(final ErrorCode errorCode, final File path) {}

    // -------------------------------------------------------------------------
    // Assert folder
    // -------------------------------------------------------------------------
    public static void assertFolderExists(final File path) {}

    public static void assertFolderExists(final String message, final File path) {}

    public static void assertFolderExists(final ErrorCode errorCode, final File path) {}

    // -------------------------------------------------------------------------
    // TOOLS
    // -------------------------------------------------------------------------
    public static void throwException(final String message) {}

    public static void throwException(final ErrorCode errorCode) {}

    public static void throwException(final ErrorCode errorCode,
                                      final String message,
                                      final Serializable... args) {}
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="warning">
    <![CDATA[
    package io.inugami.api.exceptions;
    public interface Warning {
        Warning getCurrentWaring();
    
        default String getWarningCode() {
            return getCurrentWaring() == null ? "warn" : getCurrentWaring().getWarningCode();
        }
    
        default String getMessage() {
            return getCurrentWaring() == null ? null : getCurrentWaring().getMessage();
        }
    
        default String getMessageDetail() {
            return getCurrentWaring() == null ? null : getCurrentWaring().getMessageDetail();
        }
    
        default String getWarningType() {
            return getCurrentWaring() == null ? "functional" : getCurrentWaring().getWarningType();
        }
    
        default Warning addDetail(String detail, Object... values) {
            return toBuilder().addMessageDetail(detail, values).build();
        }
        
        default String getCategory() {
            return getCurrentWaring() == null ? null : getCurrentWaring().getCategory();
        }
    
        default DefaultWarning.DefaultWarningBuilder toBuilder() {
            DefaultWarning.DefaultWarningBuilder  builder = null;
            if ( getCurrentWaring() == null) {
                builder = DefaultWarning.builder();
            }
            else {
                builder = DefaultWarning.fromWarningCode(getCurrentWaring());
            }
            return builder;
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="warningEnum">
    <![CDATA[
    import io.inugami.api.exceptions.DefaultWarning;

    public enum MyWarningCode implements implements Warning {
        APP_ENDPOINT_DEPRECATED(
                DefaultWarning.builder()
                                .warningCode("WARN-1")
                                .message("endpoint is deprecated")
                                .warningType("business")
        );
    
        private Warning warningCode;
    
        private MyWarningCode(DefaultWarning.DefaultWarningBuilder builder) {
            this.warningCode = builder.build();
        }
    
        @Override
        public Warning getCurrentWaring() {
            return warningCode;
        }
    }
    
    
    
    ]]>
</src>
<src name="warningUsage">
    <![CDATA[
    public class MyEndpoint{
    
        public void process(){
            WarningContext.getInstance()
                          .addWarnings(MyWarningCode.APP_ENDPOINT_DEPRECATED);
        }
    }
    ]]>
</src>

<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="mySpiService">
    <![CDATA[
    import io.inugami.acme;

    public interface MySpiService{
        void process();
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="mySpiServiceDefault">
    <![CDATA[
    import io.inugami.acme.implementations;

    public class MySpiServiceDefault implements MySpiService{
        public void process(){
            // do something ...
        }
    }
    
    public class MySpiServiceFallback implements MySpiService{
        public void process(){
            // do something ...
        }
    }
    ]]>
</src>

<src name="mySpiServiceDeclaration">
    <![CDATA[
    io.inugami.acme.implementations.MySpiServiceDefault
    io.inugami.acme.implementations.MySpiServiceFallback
    ]]>
</src>
<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="someService">
    <![CDATA[
    public class SomeService{
        private static List<MySpiService> INSTANCES = SpiLoader.INSTANCE.loadSpiService(MySpiService.class);
    
        public void processOnAllSpiImplementation(){
            for(MySpiService instance : INSTANCES){
                instance.process();
            }
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="spiLoader">
    <![CDATA[
    package io.inugami.api.spi;

    public class SpiLoader {
        public static SpiLoader INSTANCE = new SpiLoader();
    
        public synchronized <T> List<T> loadSpiService(Class<?> type) {
            // ...
        }
    
        public synchronized <T> T loadSpiSingleService(Class<?> type) {
            // ...
        }
    
        public synchronized <T> List<T> loadSpiService(Class<?> type, T defaultImplementation) {
            // ...
        }
    
        public synchronized <T> List<T> loadSpiServicesWithDefault(Class<?> type, T defaultImplementation) {
            // ...
        }
    
        public synchronized <T> T loadSpiServiceByPriority(Class<?> type, T defaultImplementation) {
            // ...
        }
    
        public synchronized <T> List<T> loadSpiServicesByPriority(Class<?> type) {
            // ...
        }
    
        public synchronized <T> T loadSpiSingleServicesByPriority(Class<?> type) {
            // ...
        }
    
        public synchronized <T> List<T> loadSpiServicesByPriority(Class<?> type, T defaultImplementation) {
            // ...
        }
    
        public <T> T loadSpiService(String name, Class<?> type) {
            // ...
        }
    
        public synchronized <T> T loadSpiService(String name, Class<?> type, boolean mandatory) {
            // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="spiPriority">
    <![CDATA[
    import io.inugami.acme.implementations;

    @SpiPriority(1)
    public class MySpiServiceDefault implements MySpiService{
        public void process(){
            // do something ...
        }
    }
    
    @SpiPriority(10)
    public class MySpiServiceFallback implements MySpiService{
        public void process(){
            // do something ...
        }
    }
    ]]>
</src>
<src name="someServicePriority">
    <![CDATA[
    public class SomeService{
        private static List<MySpiService> INSTANCES = SpiLoader.INSTANCE.loadSpiServicesByPriority(MySpiService.class);
    
        public void processOnAllSpiImplementation(){
            // 0 - MySpiServiceFallback
            // 1 - MySpiServiceDefault
    
            for(MySpiService instance : INSTANCES){
                instance.process();
            }
        }
    }
    ]]>
</src>

<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="annotationTools">
    <![CDATA[
    @NoArgsConstructor(access = AccessLevel.PRIVATE)
    public final class AnnotationTools {
    
        public static Annotation searchAnnotation(Annotation[] annotations, String... names) {
            // ...
        }
        
        public static Method searchMethod(Annotation annotation, String method) {
            // ...
        }
        
        public static <T> T invoke(Method method, Object object, Object... params) {
            // ...
        }
        
        public static String resolveNamed(Object object) {
            // ...
        }   
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="consoleColors">
    <![CDATA[
    @NoArgsConstructor(access = AccessLevel.PRIVATE)
    public final class ConsoleColors {
    
    public static final String RESET     = "\033[0m";
        public static final String CLEAR_ALL = "\033c";
    
        // Regular Colors
        public static final String BLACK  = "\033[0;30m";
        public static final String RED    = "\033[0;31m";
        public static final String GREEN  = "\033[0;32m";
        public static final String YELLOW = "\033[0;33m";
        public static final String BLUE   = "\033[0;34m";
        public static final String PURPLE = "\033[0;35m";
        public static final String CYAN   = "\033[0;36m";
        public static final String WHITE  = "\033[0;37m";
    
        // Bold
        public static final String BLACK_BOLD  = "\033[1;30m";
        public static final String RED_BOLD    = "\033[1;31m";
        public static final String GREEN_BOLD  = "\033[1;32m";
        public static final String YELLOW_BOLD = "\033[1;33m";
        public static final String BLUE_BOLD   = "\033[1;34m";
        public static final String PURPLE_BOLD = "\033[1;35m";
        public static final String CYAN_BOLD   = "\033[1;36m";
        public static final String WHITE_BOLD  = "\033[1;37m";
    
        // Underline
        public static final String BLACK_UNDERLINED  = "\033[4;30m";
        public static final String RED_UNDERLINED    = "\033[4;31m";
        public static final String GREEN_UNDERLINED  = "\033[4;32m";
        public static final String YELLOW_UNDERLINED = "\033[4;33m";
        public static final String BLUE_UNDERLINED   = "\033[4;34m";
        public static final String PURPLE_UNDERLINED = "\033[4;35m";
        public static final String CYAN_UNDERLINED   = "\033[4;36m";
        public static final String WHITE_UNDERLINED  = "\033[4;37m";
    
        // Background
        public static final String BLACK_BACKGROUND  = "\033[40m";
        public static final String RED_BACKGROUND    = "\033[41m";
        public static final String GREEN_BACKGROUND  = "\033[42m";
        public static final String YELLOW_BACKGROUND = "\033[43m";
        public static final String BLUE_BACKGROUND   = "\033[44m";
        public static final String PURPLE_BACKGROUND = "\033[45m";
        public static final String CYAN_BACKGROUND   = "\033[46m";
        public static final String WHITE_BACKGROUND  = "\033[47m";
    
        // High Intensity
        public static final String BLACK_BRIGHT  = "\033[0;90m";
        public static final String RED_BRIGHT    = "\033[0;91m";
        public static final String GREEN_BRIGHT  = "\033[0;92m";
        public static final String YELLOW_BRIGHT = "\033[0;93m";
        public static final String BLUE_BRIGHT   = "\033[0;94m";
        public static final String PURPLE_BRIGHT = "\033[0;95m";
        public static final String CYAN_BRIGHT   = "\033[0;96m";
        public static final String WHITE_BRIGHT  = "\033[0;97m";
    
        // Bold High Intensity
        public static final String BLACK_BOLD_BRIGHT  = "\033[1;90m";
        public static final String RED_BOLD_BRIGHT    = "\033[1;91m";
        public static final String GREEN_BOLD_BRIGHT  = "\033[1;92m";
        public static final String YELLOW_BOLD_BRIGHT = "\033[1;93m";
        public static final String BLUE_BOLD_BRIGHT   = "\033[1;94m";
        public static final String PURPLE_BOLD_BRIGHT = "\033[1;95m";
        public static final String CYAN_BOLD_BRIGHT   = "\033[1;96m";
        public static final String WHITE_BOLD_BRIGHT  = "\033[1;97m";
    
        // High Intensity backgrounds
        public static final String BLACK_BACKGROUND_BRIGHT  = "\033[0;100m";
        public static final String RED_BACKGROUND_BRIGHT    = "\033[0;101m";
        public static final String GREEN_BACKGROUND_BRIGHT  = "\033[0;102m";
        public static final String YELLOW_BACKGROUND_BRIGHT = "\033[0;103m";
        public static final String BLUE_BACKGROUND_BRIGHT   = "\033[0;104m";
        public static final String PURPLE_BACKGROUND_BRIGHT = "\033[0;105m";
        public static final String CYAN_BACKGROUND_BRIGHT   = "\033[0;106m";
        public static final String WHITE_BACKGROUND_BRIGHT  = "\033[0;107m";
    
        public enum State {
            ERROR,
            WARN,
            SUCCESS,
            UNDEFINE
        }
    
    
        public static String renderState(final State state) {
            // ...
        }
    
        public static String renderState(final State state, final String message) {
            // ...
        }
    
    
        public static String createLine(final String deco, final int size) {
            // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="hex">
    <![CDATA[
    @NoArgsConstructor(access = AccessLevel.PRIVATE)
    public class Hex {
       
        public static String encodeHexString(final byte[] data) {
            // ...
        }
        public static char[] encodeHex(final byte[] data) {
            // ...
        }
        public static char[] encodeHex(final byte[] data, final boolean toLowerCase) {
            // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="stringTools">
    <![CDATA[
    @NoArgsConstructor(access = AccessLevel.PRIVATE)
    public final class StringTools {
    
        public static String replaceAll(final Pattern regex, final String data, final String replacement) {
            // ...
        }
        
        public static String convertToAscii(final String value) {
            // ...
        }
        
        public static boolean containsChars(final String value, final String specialChar) {
                // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="jsonBuilder">
    <![CDATA[
    package io.inugami.api.models;
    public class JsonBuilder {
        public static final char    SEPARATOR_CHAR = ',';
        public static final String  VALUE_NULL     = "null";
        public static final String  SPACE = " ";
        private final StringBuilder buffer         = new StringBuilder();
        
        
        public <E extends JsonBuilder>  E returnInstance() {
            return (E)this;
        }
        
        public <E extends JsonBuilder>  E writeFunction(final String name, final String... params) {
            //...
        }
        
        public <E extends JsonBuilder>  E addReturnKeyword() {
            buffer.append("return ");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E openObject() {
            buffer.append("{");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E closeObject() {
            buffer.append("}");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E openList() {
            buffer.append('[');
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E closeList() {
            buffer.append(']');
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E openTuple() {
            buffer.append("(");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E closeTuple() {
            buffer.append(")");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E openComment() {
            buffer.append("/*");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E closeComment() {
            buffer.append("*/");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E addField(final String name) {
            valueQuot(name);
            buffer.append(':');
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final Object value) {
            buffer.append(value);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final boolean value) {
            buffer.append(value ? "true" : "false");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final byte value) {
            buffer.append(value);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final short value) {
            buffer.append(value);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final int value) {
            buffer.append(value);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final long value) {
            buffer.append(value);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final float value) {
            buffer.append(value);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E write(final double value) {
            buffer.append(value);
            return returnInstance();
        }
    
        public  <E extends JsonBuilder>  E  writeSpace() {
            return writeSpace(1);
        }
        public  <E extends JsonBuilder>  E  writeSpace(final int size) {
            if(size>0){
                for(int i=size-1; i>=0; i--){
                    write(SPACE);
                }
            }
            return returnInstance();
        }
        private <E extends JsonBuilder>  E writeParam(final String key, final String value) {
            buffer.append('"');
            buffer.append(key);
            buffer.append('"');
            buffer.append(':');
            buffer.append('"');
            buffer.append(value);
            buffer.append('"');
            
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E valueQuot(final Object value) {
            if (value == null) {
                valueNull();
            }
            else {
                buffer.append("\"");
                buffer.append(value);
                buffer.append("\"");
            }
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E valueNull() {
            buffer.append(VALUE_NULL);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E addLine() {
            buffer.append("\n");
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E addSeparator() {
            buffer.append(SEPARATOR_CHAR);
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E addEndLine() {
            buffer.append(";\n");
            return returnInstance();
        }
        
    
        
        public <E extends JsonBuilder>  E writeListString(final List<String> values) {
            // ...
        }
        
        public <E extends JsonBuilder>  E line() {
            buffer.append('\n');
            return returnInstance();
        }
        
        public <E extends JsonBuilder>  E tab() {
            buffer.append('\t');
            return returnInstance();
        }
        
        public JsonBuilder writeListJsonObject(final List<? extends JsonObject> values) {
            //...
        }
        
        public JsonObject toJsonObject() {
            return new Json(toString());
        }
        
        public StringBuilder append(final Object value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final String value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final StringBuffer value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final CharSequence value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final CharSequence value, final int start, final int end) {
            return buffer.append(value, start, end);
        }
        
        public StringBuilder append(final char... str) {
            return buffer.append(str);
        }
        
        public StringBuilder append(final char[] str, final int offset, final int len) {
            return buffer.append(str, offset, len);
        }
        
        public StringBuilder append(final boolean value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final char value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final int value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final long value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final float value) {
            return buffer.append(value);
        }
        
        public StringBuilder append(final double value) {
            return buffer.append(value);
        }
        
        @Override
        public String toString() {
            return buffer.toString();
        }
        
      
        public void clear() {
            buffer.setLength(0);
            buffer.trimToSize();
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="jsonBuilderExample">
    <![CDATA[
    {
        "name":"Joe",
        "tags":[
            "JAVA", "API"
        ]
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="jsonBuilderUsage">
    <![CDATA[
    final JsonBuilder json = new JsonBuilder();

    json.openObject();
    json.writeParam("name","Joe").addSeparator();
    json.addField("tags").writeListString(List.of("JAVA", "API"))
    json.closeObject();
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="tuple">
    <![CDATA[
    package io.inugami.api.models;
    public class Tuple<K, V> {
        
        private transient final K key;
        private transient final V value;
        
        public Tuple(final K key, final V value) {
            //...
        }
        
        @Override
        public int hashCode() {
            // ...
        }
        
        @Override
        public boolean equals(final Object obj) {
            // ...
        }
        
        @Override
        public String toString() {
            // ...
        }
        
        public K getKey() {
            return key;
        }
        
        public V getValue() {
            return value;
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="chrono">
    <![CDATA[
    package io.inugami.api.models.tools;
    public class Chrono implements Serializable {
    
        
        private long              startTime;
        
        private long              startTimeMs;
        
        private long              stopTime;
        
        private long              stopTimeMs;
        
        private boolean           running          = false;
        
    
        public Chrono() {
            // ...
        }
        
        protected Chrono(long startTime, long stopTime) {
            // ...
        }
        
        private Chrono(long startTime,
                       long startTimeMs,
                       long stopTime,
                       long stopTimeMs,
                       boolean running) {
            // ...
        }
        
        public static Chrono startChrono() {
            return new Chrono().start();
        }
        
        public Chrono start() {
            startTime = System.nanoTime();
            startTimeMs = System.currentTimeMillis();
            running = true;
            return this;
        }
        
        public Chrono stop() {
            stopTime = System.nanoTime();
            stopTimeMs = System.currentTimeMillis();
            running = false;
            return this;
        }
        
        public Chrono snapshot() {
            if (running) {
                stopTime = System.nanoTime();
            }
            return this;
        }
        
        @Override
        public int hashCode() {
            // ...
        }
        
        @Override
        public boolean equals(final Object obj) {
            // ...
        }
        
        @Override
        public String toString() {
           // ...
        }
        
        public Chrono cloneObj() {
            return new Chrono(startTime, startTimeMs, stopTime, stopTimeMs, running);
        }
        
    
        public long getDelais() {
            return stopTime == -1 ? -1 : stopTime - startTime;
        }
        
        public long getDelaisInMillis() {
            return getDelais() / 1000000;
        }
        
        public long getStartTime() {
            return startTime;
        }
        
        public long getStopTime() {
            return stopTime;
        }
        
        public boolean isRunning() {
            return running;
        }
        
        public void setRunning(final boolean running) {
            this.running = running;
        }
        
        public long getStartTimeMs() {
            return startTimeMs;
        }
        
        public long getStopTimeMs() {
            return stopTimeMs;
        }
        
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="blockingQueue">
    <![CDATA[
    public class BlockingQueue<T> extends LinkedBlockingQueue<T> {
        public List<T> pollAll() {
            // ...
        }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="mdcService_usage">
    <![CDATA[
    MdcService.getInstance()
              .clear()
              .duration(250L)
              .quantity(25)
              .size(125)
              .price(32.50);

    MdcService.getInstance()
              .lifecycleIn(()-> Loggers.IOLOG.info("start processing"));
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="mdcService_key">
    <![CDATA[
    @Getter
    public enum MdcService.MDCKeys {
        appClass,
        appClassShortName,
        appMethod,
        appService,
        appSubService,
        applicationVersion,
        asset,
        authProtocol,
        callFrom,
        callType,
        conversation_id,
        correlation_id,
        country,
        customerId,
        deviceClass,
        deviceIdentifier,
        deviceIp,
        deviceNetworkSpeedDown(Double.valueOf(0.0)),
        deviceNetworkSpeedLatency(Double.valueOf(0.0)),
        deviceNetworkSpeedUp(Double.valueOf(0.0)),
        deviceNetworkType,
        deviceType,
        duration(Long.valueOf(0)),
        env,
        errorCategory,
        errorCode,
        errorExploitationError(Boolean.FALSE),
        errorField,
        errorMessage,
        errorMessageDetail,
        errorRetryable(Boolean.FALSE),
        errorRollback(Boolean.FALSE),
        /**
         * errorStatus is <strong>int value</strong>
         */
        errorStatus,
        errorType,
        errorUrl,
        exceptionName,
        flags,
        from(LocalDateTime.now()),
        fromTimestamp(Long.valueOf(0)),
        functionalUid,
        globalStatus,
        healthStatus("up"),
        hostname,
        httpStatus(Integer.valueOf(0)),
        instanceName,
        instanceNumber,
        language,
        lifecycle,
        majorVersion,
        messageId,
        methodInCause,
        orderId,
        osVersion,
        parentSpanId,
        partner,
        partnerRequestCharset,
        partnerResponseCharset,
        partnerResponseDuration(Long.valueOf(0)),
        partnerResponseMessage,
        partnerResponseStatus(Integer.valueOf(0)),
        partnerService,
        partnerSubService,
        partnerType,
        partnerUrl,
        partnerVerb,
        price(Double.valueOf(0.0)),
        principal,
        productId,
        processId,
        processName,
        processStatus,
        quantity(Double.valueOf(0.0)),
        remoteAddress,
        requestHeaders,
        request_id,
        reservationNumber,
        responseHeaders,
        service,
        sessionId,
        size(Double.valueOf(0.0)),
        traceId,
        until(LocalDateTime.now()),
        untilTimestamp(Long.valueOf(0)),
        uri,
        url,
        urlPattern,
        userAgent,
        userId,
        status,
        verb,
        version,
        warning;

        public static final MDCKeys[]                     VALUES = values();
        private final       Serializable                  defaultValue;
        private final       Class<? extends Serializable> type;

        private MDCKeys() { }

        private MDCKeys(final Serializable defaultValue) { }
    }
    ]]>
</src>


<!--*********************************************************************** 
* 
***********************************************************************-->
<src name="mdcService_api">
    <![CDATA[
    @Getter
    @Slf4j
    public class MdcService implements ApplicationLifecycleSPI {
    
        public static final  String ISO_DATE             = "yyyy-MM-dd'T'HH:mm:ss.sss";
        public static final  String CALL_TYPE_REST       = "REST";
        public static final  String CALL_TYPE_JMS        = "JMS";
        public static final  String CALL_TYPE_RABBITMQ   = "RABBITMQ";
       
    
    
        // =========================================================================
        // CONSTRUCTOR
        // =========================================================================
        private static final MdcService INSTANCE = new MdcService();
    
        public static MdcService getInstance() {
            return INSTANCE;
        }
    
        // =========================================================================
        // METHODS
        // =========================================================================
        public void initialize() {}
    
        // =========================================================================
        // SET MDC
        // =========================================================================
        public MdcService setMdc(final Map<String, Serializable> values) {}
        public MdcService setMdc(final MDCKeys key, final Serializable value) {}
        public MdcService setMdc(final String key, final Serializable value) {}
        public MdcService addMdc(final Tuple<String, Serializable>... keys) {}
        public MdcService addMdc(final Collection<Tuple<String, Serializable>> keys) {}
    
        // =========================================================================
        // GET MDC
        // =========================================================================
        public String getMdc(final MDCKeys key) {}
        public String getMdc(final String key){}
        public boolean getBoolean(final MDCKeys key){}
        public boolean getBoolean(final String key) {}
        private int getInt(final MDCKeys key) {}
        private int getInt(final String key) {}
        private long getLong(final MDCKeys key){}
        private long getLong(final String key) {}
        private double getDouble(final MDCKeys key) {}
        private double getDouble(final String key) {}
        public Charset getCharset(final MDCKeys key) {}
        public Charset getCharset(final String key) {}
        public LocalDateTime getLocalDateTime(final MDCKeys key) {}
        public LocalDateTime getLocalDateTime(final String key) {}
        public Map<String, String> getAllMdc() {}
        public Map<String, Serializable> getAllMdcExtended(){}
        // =========================================================================
        // REMOVE
        // =========================================================================
        public MdcService remove(final MDCKeys... keys) {}
        public MdcService remove(final String... keys) {}
        public MdcService clear() {}
    
        // =========================================================================
        // FIELDS
        // =========================================================================
        public MdcService appClass(final String value){}
        public String appClass() {}
    
        public MdcService appClassShortName(final String value) {}
        public String appClassShortName() {}
    
        public MdcService appMethod(final String value) {}
        public String appMethod() {}
    
        public MdcService appService(final String value) {}
    
        public String appService() {}
    
        public MdcService appSubService(final String value) {}
        public String appSubService() {}
    
        public MdcService applicationVersion(final String value) {}
        public String applicationVersion() {}
    
        public MdcService asset(final String value) {}
        public String asset() {}
    
        public MdcService authProtocol(final String value) {}
        public String authProtocol() {}
    
        public MdcService callFrom(final String value) {}
        public String callFrom() {}
    
        public MdcService callType(final String value) {}
        public String callType() {}
    
        public MdcService conversationId(final String value) {}
        public String conversationId() {}
    
        public MdcService correlationId(final String value) {}
        public String correlationId() {}
    
        public MdcService country(final String value) {}
        public String country() {}
    
        public MdcService customerId(final String value) {}
        public String customerId() {}
    
        public MdcService deviceClass(final String value) {}
        public String deviceClass() {}
    
        public MdcService deviceIdentifier(final String value) {}
        public String deviceIdentifier() {}
    
        public MdcService deviceIp(final String value) {}
        public String deviceIp() {}
    
        public MdcService deviceNetworkSpeedDown(final double value) {}
        public double deviceNetworkSpeedDown() {}
    
        public MdcService deviceNetworkSpeedLatency(final double value) {}
        public double deviceNetworkSpeedLatency() {}
    
        public MdcService deviceNetworkSpeedUp(final double value) {}
        public double deviceNetworkSpeedUp() {}
    
        public MdcService deviceNetworkType(final String value) {}
        public String deviceNetworkType() {}
    
        public MdcService deviceType(final String value) {}
        public String deviceType() {}
    
        public MdcService duration(final long value) {}
        public long duration() {}
    
        public MdcService env(final String value) {}
        public String env() {}
    
        public MdcService errorCategory(final String value) {}
        public String errorCategory() {}
    
        public MdcService errorCode(final String value) {}
        public boolean hasError() {}
        public MdcService errorCode(final ErrorCode errorCode) {}
        public MdcService errorCodeRemove(){}
        public ErrorCode errorCode() {}
    
        public MdcService errorExploitationError(final boolean value){}
        public boolean errorExploitationError() {}
    
        public MdcService errorField(final String... value) {}
        public String errorField() {}
    
        public MdcService errorMessage(final String value) {}
        public String errorMessage() {}
    
        public MdcService errorMessageDetail(final String value) {}
        public String errorMessageDetail() {}
    
        public MdcService errorRetryable(final boolean value) {}
        public boolean errorRetryable() {}
    
        public MdcService errorRollback(final boolean value) {}
        public boolean errorRollback() {}
    
        public MdcService errorStatus(final int value) {}
        public int errorStatus() {}
    
        public MdcService errorType(final String value) {}
        public String errorType() {}
    
        public MdcService errorUrl(final String value) {}
        public String errorUrl() {}
            
        public MdcService exceptionName(final String value) {}
        public String exceptionName() {}
    
        public MdcService flags(final String value) {}
        public String flags() {}
    
        public MdcService from(final LocalDateTime value) {}
        public LocalDateTime from() {}
            
        public MdcService fromTimestamp(final long value) {}
        public long fromTimestamp() {}
            
        public MdcService functionalUid(final String value) {}
        public String functionalUid() {}
    
        public MdcService globalStatus(final String value) {}
        public String globalStatus() {}
    
        public void globalStatusSuccess() {}
        public void globalStatusError() {}
            
        public MdcService removeGlobalStatus() {}
    
        public MdcService healthStatus(final String value) {}
        public String healthStatus() {}
            
        public MdcService hostname(final String value) {}
        public String hostname() {}
            
        public MdcService httpStatus(final int value) {}
        public int httpStatus() {}
            
        public MdcService instanceName(final String value) {}
        public String instanceName() {}
            
        public MdcService instanceNumber(final String value) {}
        public String instanceNumber() {}
            
        public MdcService ioinfoIoLog(final IoInfoDTO info) {}
    
        private MdcService removeIoinfoIoLog() {}
    
        public MdcService ioinfoPartner(final IoInfoDTO info) {}
    
        public MdcService partnerRemove() {}
            
        public MdcService removeIoinfoPartner() {}
        public MdcService language(final String value) {}
            
        public String language() {}
        public MdcService lifecycle(final String value) {}
            
        public String lifecycle() {}
        public MdcService lifecycleIn() {}
            
        public Exception lifecycleIn(final VoidFunctionWithException function) {}
        public MdcService lifecycleOut() {}
            
        public Exception lifecycleOut(final VoidFunctionWithException function) {}
        public MdcService lifecycleRemove() {}
    
        public MdcService majorVersion(final String value) {}
        public String majorVersion() {}
            
        public MdcService messageId(final String value) {}
        public String messageId() {}
            
        public MdcService methodInCause(final String value) {}
        public String methodInCause() {}
            
        public Map<String, String> getTrackingInformation() {}
        public Map<String, String> getTrackingInformation(final Headers headers) {}
    
        public MdcService orderId(final String value) {}
        public String orderId() {}
            
        public MdcService osVersion(final String value) {}
        public String osVersion() {}
            
        public MdcService parentSpanId(final String value) {}
        public String parentSpanId() {}
            
        public MdcService partner(final String value) {}
        public String partner() {}
            
        public MdcService partnerRequestCharset(final String value) {}
        public MdcService partnerRequestCharset(final Charset value) {}
    
        public Charset partnerRequestCharset() {}
        public MdcService partnerResponseCharset(final String value) {}
            
        public MdcService partnerResponseCharset(final Charset value) {}
        public Charset partnerResponseCharset() {}
            
        public MdcService partnerResponseDuration(final long value) {}
        public long partnerResponseDuration() {}
            
        public MdcService partnerResponseMessage(final String value) {}
        public String partnerResponseMessage() {}
            
        public MdcService partnerResponseStatus(final int value) {}
        public int partnerResponseStatus() {}
            
        public MdcService partnerService(final String value) {}
        public String partnerService() {}
            
        public MdcService partnerSubService(final String value) {}
        public String partnerSubService() {}
            
        public MdcService partnerType(final String value) {}
        public String partnerType() {}
            
        public MdcService partnerUrl(final String value) {}
        public String partnerUrl() {}
            
        public MdcService partnerVerb(final String value) {}
        public String partnerVerb() {}
            
        public MdcService price(final double value) {}
        public double price() {}
            
        public MdcService principal(final String value) {}
        public String principal() {}
            
        public MdcService productId(final String value) {}
        public String productId() {}
            
        public MdcService processId(final String value) {}
        public String processId() {}
            
        public MdcService processName(final String value) {}
        public String processName() {}
            
        public MdcService processStatus(final String value) {}
        public String processStatus() {}
    
        public MdcService quantity(final double value) {}
        public double quantity() {}
            
        public MdcService remoteAddress(final String value) {}
        public String remoteAddress() {}
            
        public MdcService requestHeaders(final String value) {}
        public String requestHeaders() {}
            
        public MdcService requestId(final String value) {}
        public String requestId() {}
            
        public MdcService reservationNumber(final String value) {}
        public String reservationNumber() {}
            
        public MdcService responseHeaders(final String value) {}
        public String responseHeaders() {}
    
        public MdcService service(final String value) {}
        public String service() {}
            
        public MdcService sessionId(final String value) {}
        public String sessionId() {}
            
        public MdcService size(final double value) {}
        public double size() {}
            
        public MdcService traceId(final String value){}
        public String traceId() {}
    
        public MdcService until(final LocalDateTime value){}
        public LocalDateTime until() {}
    
        public MdcService untilTimestamp(final long value) {}
        public long untilTimestamp() {}
    
        public MdcService uri(final String value) {}
        public String uri() {}
    
        public MdcService url(final String value) {}
        public String url() {}
    
        public MdcService urlPattern(final String value) {}
        public String urlPattern(){}
    
        public MdcService userAgent(final String value) {}
        public String userAgent() {}
    
        public MdcService userId(final String value) {}
        public String userId() {}
    
        public MdcService verb(final String value) {}
        public MdcService status(final int status) {}
    
        public int status() {}
        public String verb() {}
    
        public MdcService version(final String value) {}
        public String version() {}
    
        public MdcService warning(final String value) {}{}
        public String warning() {}
    
    }
    ]]>
</src>


</xml>
